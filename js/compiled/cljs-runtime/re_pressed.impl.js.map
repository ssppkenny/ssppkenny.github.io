{"version":3,"sources":["re_pressed/impl.cljs"],"mappings":"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","names":["re-pressed.impl/ns-root","re-pressed.impl/max-record","re-pressed.impl/modifier-keys","re-pressed.impl/->ns-keyword","event-type","re_pressed$impl$__GT_ns_keyword_$_ns_keyword","suffix","cljs.core.keyword","re-pressed.impl/is-key?","recent-key","key-map","cljs.core/every?","p__12400","vec__12401","cljs.core.nth","k","v","cljs.core._EQ_","cljs.core.get","re-pressed.impl/register-subs","ns-keyword","re_frame.core.reg_sub","db","_","cljs.core.get_in","re-pressed.impl/add-key","current-key-maps","new-key-map","keys","cljs.core.conj","or__5045__auto__","cljs.core.into","cljs.core/take-last","re-pressed.impl/->set-key!","p__12404","p__12405","map__12406","cljs.core/--destructure-map","vec__12407","cljs.core.update_in","re-pressed.impl/->clear-keys!","p__12410","p__12411","map__12412","vec__12413","cljs.core/assoc-in","p__12416","vec__12417","re-pressed.impl/prevent-default-keys!","e","re-pressed.impl/register-events","re_frame.core.reg_event_fx","re-pressed.impl/register-effects","re-frame.core/reg-fx","p__12420","map__12421","keyboard-event-args","goog.events/listen","js/document","re-frame.core/dispatch-sync","p__12427","p__12428","map__12429","vec__12430","map__12433","map__12434","clear-on-success-event-match","map__12435","e-key","modifier-key?","tag-name","entering-input?","cljs.core/contains?","hit-key","recent-keys","always-listen-keys","prevent-default-keys","clear-keys","event-keys","always-listen?","p1__12422#","cljs.core/some","cljs.core/not","vec__12436","cljs.core/last","is-key-sequence?","key-maps","cljs.core/true?","p1__12423#","p2__12424#","cljs.core.mapv","cljs.core.concat","cljs.core/reverse","cljs.core.repeat","check-events","cljs.core.doall","iter__5523__auto__","s__12440","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__12442","cljs.core/chunk-buffer","i__12441","vec__12443","cljs.core/-nth","seq__12444","first__12445","cljs.core/first","cljs.core/next","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__12439","cljs.core/chunk-rest","vec__12446","seq__12447","first__12448","cljs.core/cons","cljs.core/rest","trigger-event","ks","triggered?","cljs.core/PersistentVector","triggered-event","event?","G__12449","p1__12425#","cljs.core.filter","cljs.core/second","clear?","and__5043__auto__","G__12450","p1__12426#","cljs.core/chunk-first"],"sourcesContent":["(ns re-pressed.impl\n  (:require\n   [re-frame.core :as rf]\n   [goog.events :as ev]\n   ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Vars\n\n(def ns-root \"re-pressed.core/\")\n\n(def max-record 25)\n\n(def modifier-keys #{16 ;; shift\n                     17 ;; ctrl\n                     18 ;; alt\n                     91 ;; windows (i.e. meta) ... TODO: apple key?\n                     })\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Util\n\n(defn ->ns-keyword [event-type]\n  (fn ns-keyword\n    ([]\n     (ns-keyword nil))\n    ([suffix]\n     (keyword\n      (str ns-root\n           event-type\n           suffix)))))\n\n\n(defn is-key?\n  [recent-key key-map]\n  (every? (fn [[k v]]\n            (= (get recent-key k)\n               v))\n          key-map))\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Subs\n\n(defn register-subs [event-type]\n  (let [ns-keyword (->ns-keyword event-type)]\n    (rf/reg-sub\n     (ns-keyword \"-keys\")\n     (fn [db _]\n       (get-in db [(ns-keyword) :keys])))\n\n    (rf/reg-sub\n     (ns-keyword \"-event-keys\")\n     (fn [db _]\n       (get-in db [(ns-keyword) :event-keys])))\n\n    (rf/reg-sub\n     (ns-keyword \"-clear-keys\")\n     (fn [db _]\n       (get-in db [(ns-keyword) :clear-keys])))\n\n    (rf/reg-sub\n     (ns-keyword \"-always-listen-keys\")\n     (fn [db _]\n       (get-in db [(ns-keyword) :always-listen-keys])))\n\n    (when (= \"keydown\" event-type)\n      (rf/reg-sub\n       (ns-keyword \"-prevent-default-keys\")\n       (fn [db _]\n         (get-in db [(ns-keyword) :prevent-default-keys]))))\n    ))\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Events\n\n(defn- add-key\n  [current-key-maps new-key-map]\n  (let [keys (if new-key-map\n               (conj (or current-key-maps\n                         [])\n                     new-key-map)\n               current-key-maps)]\n    (into []\n          (take-last max-record keys))))\n\n\n(defn- ->set-key!\n  [event-type]\n  (let [ns-keyword (->ns-keyword event-type)]\n    (fn set-key!\n      [{:keys [db]} [_ key-map]]\n      {:db (update-in db [(ns-keyword) :keys] add-key key-map)})))\n\n\n(defn- ->clear-keys!\n  [event-type]\n  (let [ns-keyword (->ns-keyword event-type)]\n    (fn clear-keys!\n      [{:keys [db]} [_ key-map]]\n      {:db (assoc-in db [(ns-keyword)\n                         :keys] [])})))\n\n\n(defn prevent-default-keys!\n  [_ [_ e]]\n  (let [k (keyword\n           (str ns-root \"prevent-default\"))]\n    {k e}))\n\n\n(defn register-events [event-type]\n  (let [ns-keyword (->ns-keyword event-type)]\n\n    (rf/reg-event-fx  (ns-keyword \"-set-key\")\n                      (->set-key! event-type))\n\n    (rf/reg-event-fx (ns-keyword \"-clear-keys\")\n                     (->clear-keys! event-type))\n\n    (when (= \"keydown\" event-type)\n      (rf/reg-event-fx (ns-keyword \"-prevent-default-keys\")\n                       prevent-default-keys!))))\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Effects\n\n(defn register-effects [event-type]\n  (when (= \"keydown\" event-type)\n    (rf/reg-fx\n     (keyword\n      (str ns-root \"prevent-default\"))\n     (fn [e]\n       (.preventDefault e)))))\n\n\n(rf/reg-fx\n  (keyword\n    (str ns-root \"keyboard-event\"))\n\n  (fn [{:keys [event-type] :as keyboard-event-args}]\n    (register-subs event-type)\n    (register-events event-type)\n    (register-effects event-type)\n\n    (ev/listen\n      js/document\n      event-type\n      (fn [e]\n        (rf/dispatch-sync [(keyword\n                             (str ns-root \"handle-keyboard-event\"))\n                           keyboard-event-args\n                           e])))))\n\n\n(rf/reg-event-fx\n  (keyword\n    (str ns-root \"handle-keyboard-event\"))\n\n  (fn [{:keys [db]}\n       [_\n        {:keys [event-type]\n         {:keys [clear-on-success-event-match]} :arguments}\n        e]]\n    (let [ns-keyword (->ns-keyword event-type)\n\n          e-key         (.-keyCode e)\n          modifier-key? (modifier-keys e-key)\n\n          ;; --\n          ;; thanks re-frame-10x for this snippet\n          tag-name        (.-tagName (.-target e))\n          entering-input? (contains?\n                            #{\"INPUT\"\n                              \"SELECT\"\n                              \"TEXTAREA\"} tag-name)\n          ;; --\n\n          hit-key {:altKey   (.-altKey e)\n                   :ctrlKey  (.-ctrlKey e)\n                   :metaKey  (.-metaKey e)\n                   :shiftKey (.-shiftKey e)\n                   :keyCode  (.-keyCode e)}\n\n          {recent-keys :keys\n           :keys [always-listen-keys\n                  prevent-default-keys\n                  clear-keys\n                  event-keys]} (get db (ns-keyword))\n\n          always-listen?     (some #(is-key? hit-key %) always-listen-keys)]\n\n      (when (or (and (not modifier-key?)\n                     (not entering-input?))\n                always-listen?)\n        (let [recent-keys (add-key recent-keys hit-key)\n              recent-key (last recent-keys)\n\n              is-key-sequence? (fn [key-maps]\n                                 (every? true?\n                                         (mapv\n                                           #(is-key? %1 %2)\n                                           (concat (reverse recent-keys)\n                                                   (repeat max-record {}))\n                                           (reverse key-maps))))\n\n              check-events (doall\n                             (for [[trigger-event\n                                    & ks] event-keys]\n                               (let [triggered? (some is-key-sequence? ks)]\n                                 (vector trigger-event triggered?))))\n\n              [triggered-event event?] (some->> check-events\n                                                (filter #(true? (second %)))\n                                                first)\n\n              clear? (some is-key-sequence? clear-keys)]\n          {:db (assoc-in db [(ns-keyword) :keys]\n                         (if (or clear?\n                                 (and event? clear-on-success-event-match))\n                           []\n                           recent-keys))\n           :fx\n           (cond-> []\n             (and (= \"keydown\" event-type)\n                  (some #(is-key? recent-key %) prevent-default-keys))\n             (conj [:dispatch [(ns-keyword \"-prevent-default-keys\") e]])\n\n             event?\n             (conj [:dispatch (conj triggered-event\n                                    e\n                                    recent-keys)]))})))))\n"],"x_google_ignoreList":[0]}