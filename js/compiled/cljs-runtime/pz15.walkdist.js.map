{"version":3,"sources":["pz15/walkdist.cljs"],"mappings":"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","names":["pz15.walkdist/UP","pz15.walkdist/DOWN","pz15.walkdist/inside?","x","pz15.walkdist/target-state","cljs.core.mapv","cljs.core/zipmap","cljs.core.range","cljs.core/vec","cljs.core.partition","cljs.core.map","cljs.core/rem","pz15.walkdist/inc-map","m","k","v","cljs.core.get","cljs.core.assoc","cljs.core.dissoc","pz15.walkdist/change-zero-row","pz15.walkdist/map-values","f","p__13370","vec__13371","cljs.core.nth","cljs.core.into","p__13374","vec__13375","pz15.walkdist/with-index","y","a","pz15.walkdist/state-coords","s","cljs.core.map_indexed","cljs.core/vector","pz15.walkdist/transpose-coords","coords","p__13378","vec__13379","vec__13382","n","pz15.walkdist/transpose-state","new-zero","new-board","tc","cljs.core/sorted-map","cljs.core/seq","cljs.core/group-by","p__13385","vec__13386","vec__13389","iter__5523__auto__","s__13393","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__13395","cljs.core/chunk-buffer","i__13394","vec__13396","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__13392","cljs.core/chunk-rest","vec__13406","cljs.core/first","cljs.core/cons","cljs.core/rest","p__13399","vec__13400","vec__13403","p__13409","vec__13410","vec__13413","b","pz15.walkdist/sum-seq","cljs.core.reduce","cljs.core/+","pz15.walkdist/num-to-row","cljs.core._EQ_","cljs.core/quot","pz15.walkdist/num-to-col","pz15.walkdist/row-to-freqs","row","cljs.core/frequencies","cljs.core/keys","pz15.walkdist/col-to-freqs","p__13416","map__13417","cljs.core/--destructure-map","pz15.walkdist/state-to-rows","board","zero","p__13418","map__13419","pz15.walkdist/state-to-cols","pz15.walkdist/manh-dist","t","c1","c2","s__13421","b__13423","i__13422","vec__13424","iter__13420","vec__13433","vec__13427","vec__13430","vec__13436","vec__13439","x1","y1","x2","y2","cljs.core/abs","p__13442","map__13443","pz15.walkdist/next-node","state","length","action","new-pos","ret-val","new-row","uniq-elts","cljs.core/set","cur-row","new-nodes","s__13445","b__13447","i__13446","iter__13444","pz15.walkdist/expand","node","reached","q","next-nodes","cljs.core/flatten","s__13449","b__13451","i__13450","iter__13448","nn","p","r","vec__13455","seq__13456","first__13457","cljs.core/next","ns","new-vals","cljs.core/contains?","new-q","new-r","pz15.walkdist/get-dists","s__13459","b__13461","i__13460","vec__13462","iter__13458","vec__13465","pz15.walkdist/node-to-list","acc","cljs.core.conj","pz15.walkdist/state-to-string","smaps","cljs.core/vals","clojure.set/map-invert","clojure.string.join","pz15.walkdist/solution","start-state","start-node","tailrecursion.priority_map.priority_map","cljs.core/empty?","cljs.core/peek","next-result","cljs.core/pop","new-reached","new-queue","js/pz15","js/pz15.walkdist","js/pz15.walkdist.dists","pz15.walkdist/dists","cljs.core/chunk-first"],"sourcesContent":["(ns pz15.walkdist\n  (:require \n   [tailrecursion.priority-map :as pm]\n    [clojure.set :refer [map-invert]])\n)\n\n(def ^:const UP 1)\n\n(def ^:const DOWN -1)\n\n\n(defn inside? [x] (and (>= x 0) (< x 4)))\n\n\n(def target-state\n  {:board\n   (mapv (fn [x] (zipmap x (range 4)))\n         (mapv vec (partition 4 (map (fn [x] (rem (+ x 1) 16)) (range 16))))) :zero 3})\n\n(defn inc-map [m k]\n  (let [v (get m k 0)]\n    (if (> v 1)\n      (assoc (assoc m k (- v 1)) 0 1)\n      (assoc (dissoc m k) 0 1)\n      )\n    )\n  )\n\n(defn change-zero-row [m k]\n  (let [v (get m k 0)]\n    (if (> v 0)\n      (assoc (dissoc m 0) k (+ v 1))\n      (assoc (dissoc m 0) k 1)\n      )\n    )\n  )\n\n(defn map-values [f m]\n  (->> (map (fn [[k v]] [k (f v)]) m)\n       (into {})))\n\n(defn with-index [[x y :as v]]\n  (map-values (fn [a] [x a]) y)\n  )\n\n(defn state-coords [s]\n  (into {} (mapv with-index (mapv\n                              (fn [x] x)\n                              (map-indexed vector (:board s)))))\n  )\n\n(defn transpose-coords [coords]\n  (map (fn [[n [x y]]]\n         [n [y x]]\n         ) coords\n       )\n  )\n\n(defn transpose-state [s]\n  (let [coords (state-coords s)\n        new-zero (nth (get coords 0) 1)\n        new-board (let [tc (into (sorted-map) (seq\n                                                (group-by (fn [[n [x y]]] x)\n                                                          (transpose-coords\n                                                            coords)\n                                                          )\n                                                )\n                                 )]\n                    (for [[k v] tc]\n                      (into {} (mapv (fn [[x [a b]]] {x b}) v))\n                      )\n                    )\n        ]\n    {:board new-board :zero new-zero}\n    )\n  )\n\n\n(defn sum-seq [s]\n  (reduce + s)\n  )\n\n(defn num-to-row [n]\n  (if (= n 0)\n    0\n    (+ (quot (- n 1) 4) 1)\n    )\n  )\n\n(defn num-to-col [n]\n  (if (= n 0)\n    0\n    (if (= (rem n 4) 0) 4 (rem n 4))\n    )\n  )\n\n(defn row-to-freqs [row]\n  (frequencies (mapv num-to-row (keys row)))\n  )\n\n(defn col-to-freqs [row]\n  (frequencies (mapv num-to-col (keys row)))\n  )\n(defn state-to-rows [{:keys [board zero]}]\n  (let [new-board (mapv row-to-freqs board)]\n    {:board new-board :zero zero}\n    )\n  )\n\n(defn state-to-cols [{:keys [board zero]}]\n  (let [new-board (mapv col-to-freqs board)]\n    {:board new-board :zero zero}\n    )\n  )\n\n\n(defn manh-dist [s t]\n  (let [c1 (state-coords s)\n        c2 (state-coords t)\n        ]\n    (sum-seq (for [[k v] c1]\n               (let [[x1 y1] v\n                     [x2 y2] (get c2 k)\n                     ]\n                 (+ (abs (- x1 x2)) (abs (- y1 y2)))\n                 )\n               )\n             )\n    )\n  )\n\n\n(defn next-node [{:keys [state length]} action]\n  (let [board (:board state)\n        zero (:zero state)\n        new-pos (+ zero action)\n        ret-val (if (inside? new-pos)\n                  ;;\n                  (let [\n                        new-row (nth board new-pos)\n                        uniq-elts (set (keys new-row))\n                        cur-row (nth board zero)\n                        new-nodes (for [x uniq-elts]\n                                    (let [\n                                          new-board {:board (assoc (assoc board new-pos (inc-map new-row x)) zero (change-zero-row cur-row x)) :zero new-pos}\n                                          ]\n                                      {:state new-board :length (+ length 1)}\n                                      )\n                                    )]\n                    (vec new-nodes)) []\n                  )]\n    ret-val\n    ))\n\n(defn expand [node reached q]\n  (let [next-nodes (flatten (for [action [UP DOWN]]\n                              (next-node node action)))]\n    (loop [nn next-nodes p q r reached]\n      (if (= (count nn) 0)\n        {:queue p :reached r}\n        (let [[n & ns] nn\n              s (:state n)\n              new-vals (if (not (contains? r s))\n                         {:reached (assoc r s n) :queue (assoc p n (:length n))}\n                         {:reached r :queue p}\n                         )\n              new-q (:queue new-vals)\n              new-r (:reached new-vals)\n              ]\n          (recur ns new-q new-r)\n          )\n        ))\n    )\n  )\n\n\n(defn get-dists [m]\n  (into {} (for [[k v] m] [k ((fn [x] (:length x)) v)])))\n\n\n\n(defn node-to-list [node]\n  (loop [n node acc []]\n    (if (not (some? (:prev n)))\n      (conj acc (:state n))\n      (recur (:prev n) (conj acc (:state n)))\n      )\n    )\n  )\n\n(defn state-to-string [s]\n  (let [\n        smaps (map (fn [x] (vals (into (sorted-map) (map-invert x)))) (:board s))\n        ]\n    (clojure.string/join \"\\n\" smaps)\n    )\n  )\n\n(defn solution []\n  (let [start-state {:board [{1 4}, {2 4}, {3 4}, {4 3, 0 1}] :zero 3}\n        start-node {:state start-state :length 0 :prev nil}\n        q (pm/priority-map start-node 0)\n        reached {start-state start-node}\n        ]\n    (loop [r reached p q]\n      (if (not (empty? p))\n        (let [n (nth (peek p) 0)\n              next-result (expand n r (pop p))\n              new-reached (:reached next-result)\n              new-queue (:queue next-result)]\n          (recur new-reached new-queue)\n          )\n        (get-dists r)\n        )\n      )\n    )\n  )\n\n\n(defonce dists \n  (solution)\n  )\n"]}