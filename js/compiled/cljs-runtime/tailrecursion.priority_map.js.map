{"version":3,"sources":["tailrecursion/priority_map.cljs"],"mappings":"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","names":["unused__10314__auto__","self__","G__12490","js/Error","args12453","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","tailrecursion.priority-map/PersistentPriorityMap","tailrecursion.priority-map/->PersistentPriorityMap","priority->set-of-items","item->priority","meta","keyfn","__hash","coll","writer","opts","pr-pair","keyval","cljs.core/pr-sequential-writer","cljs.core/pr-writer","this","entry","cljs.core/vector?","cljs.core/-nth","cljs.core.reduce","cljs.core/-conj","cljs.core/with-meta","other","cljs.core/-equiv","h__5154__auto__","cljs.core/hash-unordered-coll","cljs.core/seq","iter__5523__auto__","s__12473","cljs.core/LazySeq","temp__5804__auto__","xs__6360__auto__","vec__12478","cljs.core/first","cljs.core.nth","iterys__5519__auto__","s__12475","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__12477","cljs.core/chunk-buffer","i__12476","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__12474","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__12472","priority","item-set","item","s__12482","vec__12487","s__12484","b__12486","i__12485","iter__12483","iter__12481","s__12455","vec__12460","s__12457","b__12459","i__12458","iter__12456","iter__12454","cljs.core/rseq","s__12464","vec__12469","s__12466","b__12468","i__12467","iter__12465","iter__12463","cljs.core.get","not-found","f","cljs.core/val","cljs.core/key","priority-key","cljs.core._EQ_","cljs.core.dissoc","cljs.core.assoc","cljs.core.disj","temp__5802__auto__","current-priority","current-priority-key","cljs.core.conj","cljs.core/contains?","ascending?","fexpr__12491","k","sets","cljs.core.subseq","cljs.core/>=","cljs.core.rsubseq","cljs.core/<=","s__12493","vec__12498","s__12495","b__12497","i__12496","iter__12494","iter__12492","s__12502","vec__12507","s__12504","b__12506","i__12505","iter__12503","iter__12501","G__12510","cljs.core/compare","cljs.core/sorted-map","cljs.core/identity","tailrecursion.priority-map/pm-empty-by","comparator","cljs.core/sorted-map-by","var_args","G__12512","tailrecursion.priority-map/pm-empty-keyfn","tailrecursion.priority-map/read-priority-map","elems","cljs.core/map?","cljs.core.into","cljs.reader/register-tag-parser!","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","tailrecursion.priority-map/priority-map","seq12513","self__5755__auto__","keyvals","in","out","cljs.core/nnext","cljs.core/second","tailrecursion.priority-map/priority-map-by","seq12514","G__12515","cljs.core/next","self__5754__auto__","tailrecursion.priority-map/priority-map-keyfn","seq12516","G__12517","tailrecursion.priority_map.pm_empty_keyfn","tailrecursion.priority-map/priority-map-keyfn-by","seq12518","G__12519","G__12520","cljs.core/chunk-first"],"sourcesContent":["(ns tailrecursion.priority-map\n  (:require [cljs.core :as core])\n  (:use [cljs.reader :only [register-tag-parser!]])\n  (:require-macros [cljs.core :as coreclj]))\n\n(deftype PersistentPriorityMap [priority->set-of-items item->priority meta keyfn ^:mutable __hash]\n  IPrintWithWriter\n  (-pr-writer [coll writer opts]\n    (let [pr-pair (fn [keyval] (pr-sequential-writer writer pr-writer \"\" \" \" \"\" opts keyval))]\n      (pr-sequential-writer writer pr-pair \"#tailrecursion.priority-map {\" \", \" \"}\" opts coll)))\n\n  IWithMeta\n  (-with-meta [this meta]\n    (PersistentPriorityMap. priority->set-of-items item->priority meta keyfn __hash))\n\n  IMeta\n  (-meta [this] meta)\n\n  ICollection\n  (-conj [this entry]\n    (if (vector? entry)\n      (-assoc this (-nth entry 0) (-nth entry 1))\n      (reduce -conj this entry)))\n\n  IEmptyableCollection\n  (-empty [this] (with-meta\n                   tailrecursion.priority-map.PersistentPriorityMap.EMPTY\n                   meta))\n\n  IEquiv\n  (-equiv [this other]\n    (-equiv item->priority other))\n\n  IHash\n  (-hash [this]\n    (coreclj/caching-hash this core/hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [this]\n    (if keyfn\n      (seq (for [[priority item-set] priority->set-of-items, item item-set]\n             [item (item->priority item)]))\n      (seq (for [[priority item-set] priority->set-of-items, item item-set]\n             [item priority]))))\n\n  IReversible\n  (-rseq [coll]\n    (if keyfn\n      (seq (for [[priority item-set] (rseq priority->set-of-items), item item-set]\n             [item (item->priority item)]))\n      (seq (for [[priority item-set] (rseq priority->set-of-items), item item-set]\n             [item priority]))))\n\n  ICounted\n  (-count [this]\n    (count item->priority))\n\n  ILookup\n  (-lookup [this item]\n    (get item->priority item))\n  (-lookup [coll item not-found]\n    (get item->priority item not-found))\n\n  IStack\n  (-peek [this]\n    (when-not (zero? (count item->priority))\n      (let [f (first priority->set-of-items)\n            item (first (val f))]\n        (if keyfn\n          [item (item->priority item)]\n          [item (key f)]))))\n  (-pop [this]\n    (if (zero? (count item->priority))\n      (throw (js/Error. \"Can't pop empty priority map\"))\n      (let [f (first priority->set-of-items)\n            item-set (val f)\n            item (first item-set)\n            priority-key (key f)]\n        (if (= (count item-set) 1)\n          (PersistentPriorityMap.\n           (dissoc priority->set-of-items priority-key)\n           (dissoc item->priority item)\n           meta\n           keyfn\n           nil)\n          (PersistentPriorityMap.\n           (assoc priority->set-of-items priority-key (disj item-set item)),\n           (dissoc item->priority item)\n           meta\n           keyfn\n           nil)))))\n\n  IAssociative\n  (-assoc [this item priority]\n    (if-let [current-priority (get item->priority item nil)]\n      (if (= current-priority priority)\n        this\n        (let [priority-key (keyfn priority)\n              current-priority-key (keyfn current-priority)\n              item-set (get priority->set-of-items current-priority-key)]\n          (if (= (count item-set) 1)\n            (PersistentPriorityMap.\n             (assoc (dissoc priority->set-of-items current-priority-key)\n               priority-key (conj (get priority->set-of-items priority-key #{}) item))\n             (assoc item->priority item priority)\n             meta\n             keyfn\n             nil)\n            (PersistentPriorityMap.\n             (assoc priority->set-of-items\n                    current-priority-key (disj (get priority->set-of-items current-priority-key) item)\n                    priority-key (conj (get priority->set-of-items priority-key #{}) item))\n             (assoc item->priority item priority)\n             meta\n             keyfn\n             nil))))\n      (let [priority-key (keyfn priority)]\n        (PersistentPriorityMap.\n         (assoc priority->set-of-items\n           priority-key (conj (get priority->set-of-items priority-key #{}) item))\n         (assoc item->priority item priority)\n         meta\n         keyfn\n         nil))))\n\n  (-contains-key? [this item]\n    (contains? item->priority item))\n\n  IMap\n  (-dissoc [this item]\n    (let [priority (item->priority item ::not-found)]\n      (if (= priority ::not-found)\n        this\n        (let [priority-key (keyfn priority)\n              item-set (priority->set-of-items priority-key)]\n          (if (= (count item-set) 1)\n            (PersistentPriorityMap.\n             (dissoc priority->set-of-items priority-key)\n             (dissoc item->priority item)\n             meta\n             keyfn\n             nil)\n            (PersistentPriorityMap.\n             (assoc priority->set-of-items priority-key (disj item-set item)),\n             (dissoc item->priority item)\n             meta\n             keyfn\n             nil))))))\n\n  ISorted\n  (-sorted-seq [this ascending?]\n    ((if ascending? seq rseq) this))\n  (-sorted-seq-from [this k ascending?]\n    (let [sets (if ascending?\n                 (subseq priority->set-of-items >= k)\n                 (rsubseq priority->set-of-items <= k))]\n      (if keyfn\n        (seq (for [[priority item-set] sets, item item-set]\n               [item (item->priority item)]))\n        (seq (for [[priority item-set] sets, item item-set]\n               [item priority])))))\n  (-entry-key [this entry]\n    (keyfn (val entry)))\n  (-comparator [this] compare)\n\n  IFn\n  (-invoke [this item]\n    (-lookup this item))\n  (-invoke [this item not-found]\n    (-lookup this item not-found)))\n\n(set! tailrecursion.priority-map.PersistentPriorityMap.EMPTY\n      (PersistentPriorityMap. (sorted-map) {} {} identity nil))\n\n(defn- pm-empty-by [comparator]\n  (PersistentPriorityMap. (sorted-map-by comparator) {} {} identity nil))\n\n(defn- pm-empty-keyfn\n  ([keyfn] (PersistentPriorityMap. (sorted-map) {} {} keyfn nil))\n  ([keyfn comparator] (PersistentPriorityMap. (sorted-map-by comparator) {} {} keyfn nil)))\n\n(defn- read-priority-map [elems]\n  (if (map? elems)\n    (into tailrecursion.priority-map.PersistentPriorityMap.EMPTY elems)\n    (throw (js/Error \"Priority map literal expects a map for its elements.\"))))\n\n(register-tag-parser! \"tailrecursion.priority-map\" read-priority-map)\n\n(defn priority-map\n  \"keyval => key val\n  Returns a new priority map with supplied mappings.\"\n  ([& keyvals]\n     (loop [in (seq keyvals) out tailrecursion.priority-map.PersistentPriorityMap.EMPTY]\n       (if in\n         (recur (nnext in) (assoc out (first in) (second in)))\n         out))))\n\n(defn priority-map-by\n  \"keyval => key val\n  Returns a new priority map with supplied\n  mappings, using the supplied comparator.\"\n  ([comparator & keyvals]\n     (loop [in (seq keyvals) out (pm-empty-by comparator)]\n       (if in\n         (recur (nnext in) (assoc out (first in) (second in)))\n         out))))\n\n(defn priority-map-keyfn\n  \"keyval => key val\n  Returns a new priority map with supplied\n  mappings, using the supplied keyfn.\"\n  ([keyfn & keyvals]\n     (loop [in (seq keyvals) out (pm-empty-keyfn keyfn)]\n       (if in\n         (recur (nnext in) (assoc out (first in) (second in)))\n         out))))\n\n(defn priority-map-keyfn-by\n  \"keyval => key val\n  Returns a new priority map with supplied\n  mappings, using the supplied keyfn and comparator.\"\n  ([keyfn comparator & keyvals]\n     (loop [in (seq keyvals) out (pm-empty-keyfn keyfn comparator)]\n       (if in\n         (recur (nnext in) (assoc out (first in) (second in)))\n         out))))\n"],"x_google_ignoreList":[0]}