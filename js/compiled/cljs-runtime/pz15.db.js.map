{"version":3,"sources":["pz15/db.cljs"],"mappings":"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","names":["pz15.db/read-dists","js/console","f","cljs.reader.read_string","js/pz15","js/pz15.db","js/pz15.db.dists","pz15.db/dists","js/pz15.db.UP","pz15.db/UP","js/pz15.db.DOWN","pz15.db/DOWN","js/pz15.db.LEFT","pz15.db/LEFT","js/pz15.db.RIGHT","pz15.db/RIGHT","pz15.db/sum-seq","s","cljs.core.reduce","cljs.core/+","pz15.db/count-greater","n","v","iter__5523__auto__","s__16469","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__16471","cljs.core/chunk-buffer","i__16470","vec__16472","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__16468","cljs.core/chunk-rest","vec__16475","cljs.core/first","cljs.core/cons","cljs.core/rest","i","x","pz15.db/even-perm?","cljs.core/vec","cljs.core.map_indexed","a","b","s__16479","b__16481","i__16480","vec__16482","iter__16478","vec__16485","cljs.core.subvec","cljs.core._EQ_","cljs.core/rem","pz15.db/random-state","cljs.core/shuffle","cljs.core.range","zero","cljs.core/quot","cljs.core.filter","cljs.core.mapv","cljs.core/zipmap","cljs.core.partition","js/pz15.db.target-state","pz15.db/target-state","cljs.core.map","pz15.db/swap-elts","i1","i2","cljs.core.assoc","pz15.db/inside?","pz15.db/sort-row-by-value","row","cljs.core.into","cljs.core.sort_by","pz15.db/switch-hor","board","pos","vec__16488","vec__16491","zero-row","zero-pos","cljs.core.get","y","n1","n2","pz15.db/switch-vert","vec__16494","vec__16497","vv","new-zero-row","new-row","p__16500","map__16501","cljs.core/--destructure-map","pz15.db/next-state-for-action","action","next-s","pz15.db/move-right","new-state","pz15.db/move-left","pz15.db/move-down","pz15.db/move-up","pz15.db/default-db","cljs.core/chunk-first"],"sourcesContent":["(ns pz15.db\n  (:require\n   [clojure.set :refer [map-invert]]\n   [shadow.resource :as rc]\n   [cljs.reader :as rdr]\n  )\n)\n\n(defn read-dists []\n    (.log js/console \"log\")\n    (let [f (rc/inline \"pz15/data.edn\")]\n    (rdr/read-string f)\n    )\n  )\n\n(defonce dists \n  (read-dists)\n)\n\n(defonce ^:const UP 1)\n\n(defonce ^:const DOWN -1)\n\n(defonce ^:const LEFT 10)\n\n(defonce ^:const RIGHT -10)\n\n(defn sum-seq [s]\n  (reduce + s)\n  )\n\n\n(defn count-greater [n v]\n  (sum-seq (for [[i x] v]\n             (if (> n x) 1 0)\n             ))\n  )\n\n\n(defn even-perm? [s]\n  (let [\n        v (vec (map-indexed (fn [a b] [(+ a 1) b]) s))\n        s (sum-seq (for [[i n] v]\n                     (count-greater n (subvec v i))\n                     ))\n        ]\n    (= (rem s 2) 0)\n    )\n  )\n\n(defn random-state []\n  (loop [v (shuffle (range 16))]\n    (let [\n          zero (quot (.indexOf v 0) 4)\n          f (filter (fn [x] (> x 0)) v)\n          ]\n      (if (or (and (even-perm? f) (= (rem (+ zero 1) 2) 0))\n              (and (not (even-perm? f)) (> (rem (+ zero 1) 2) 0))\n              )\n        {:board\n         (mapv (fn [x] (zipmap x (range 4)))\n               (mapv vec (partition 4 v))) :zero zero}\n        (recur (shuffle (range 16)))\n        )\n      )\n    ))\n\n\n(defonce target-state\n  {:board\n   (mapv (fn [x] (zipmap x (range 4)))\n         (mapv vec (partition 4 (map (fn [x] (rem (+ x 1) 16)) (range 16))))) :zero 3})\n\n(defn swap-elts [v i1 i2] (assoc v i2 (v i1) i1 (v i2)))\n\n(defn inside? [x] (and (>= x 0) (< x 4)))\n\n(defn sort-row-by-value [row]\n  (into {} (sort-by (fn [a] (nth a 1)) (vec row)))\n  )\n\n(defn switch-hor [board zero pos]\n  (let [zero-row (nth board zero)\n        zero-pos (get zero-row 0)\n        a (vec zero-row)\n        x (nth a pos)\n        y (nth a zero-pos)\n        [n1 i1] x\n        [n2 i2] y\n        ]\n    (assoc board zero (into {} (assoc (assoc a i1 [n2 i1]) i2 [n1 i2])))\n    )\n  )\n\n(defn switch-vert [board zero pos]\n  (let [vv (mapv vec board)\n        zero-pos (get (nth board zero) 0)\n        zero-row (nth vv zero)\n        row (nth vv pos)\n        [n1 i1] (nth zero-row zero-pos)\n        [n2 i2] (nth row zero-pos)\n        new-zero-row (into {} (assoc zero-row i1 [n2 i2]))\n        new-row (into {} (assoc row i1 [n1 i1]))\n        ]\n    (assoc (assoc board zero new-zero-row) pos new-row)\n    )\n  )\n\n(defn next-state-for-action [{:keys [board zero]} action]\n  (let [\n        zero-row (nth board zero)\n        zero-pos (get zero-row 0)\n        next-s (cond\n                 (= action UP) (if (inside? (+ zero 1)) {:board (switch-vert board zero (+ zero 1)) :zero (+ zero 1)} nil)\n                 (= action DOWN) (if (inside? (- zero 1)) {:board (switch-vert board zero (- zero 1)) :zero (- zero 1)} nil)\n                 (= action LEFT) (if (inside? (+ zero-pos 1)) {:board (switch-hor board zero (+ zero-pos 1)) :zero zero} nil)\n                 :else (if (inside? (- zero-pos 1)) {:board (switch-hor board zero (- zero-pos 1)) :zero zero} nil)\n                 )\n        ]\n    (if (some? next-s)\n        {:board (mapv sort-row-by-value (:board next-s)) :zero (:zero next-s)}\n        nil\n      )\n    )\n  )\n\n(defn move-right [s]\n  (let [new-state (next-state-for-action s RIGHT)]\n  ;;(let [new-state s]\n  (if (some? new-state)\n    new-state s\n    )\n    )\n)\n\n(defn move-left [s]\n  (let [new-state (next-state-for-action s LEFT)]\n  ;;(let [new-state s]\n  (if (some? new-state)\n    new-state s\n    )\n    )\n)\n\n(defn move-down [s]\n  (let [new-state (next-state-for-action s DOWN)]\n  ;;(let [new-state s]\n  (if (some? new-state)\n    new-state s\n    )\n    )\n)\n\n\n(defn move-up [s]\n  (let [new-state (next-state-for-action s UP)]\n  ;;(let [new-state s]\n  (if (some? new-state)\n    new-state s\n    )\n    )\n)\n\n\n(def default-db\n  {:name \"re-frame\"\n   :state (random-state)\n   :solution []\n   :need-to-solve false\n   }\n  )\n"]}