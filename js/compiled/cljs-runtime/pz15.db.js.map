{"version":3,"sources":["pz15/db.cljs"],"mappings":"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","names":["js/pz15","js/pz15.db","js/pz15.db.dists","pz15.db/dists","pz15.walkdist/dists","js/pz15.db.UP","pz15.db/UP","js/pz15.db.DOWN","pz15.db/DOWN","js/pz15.db.LEFT","pz15.db/LEFT","js/pz15.db.RIGHT","pz15.db/RIGHT","pz15.db/sum-seq","s","cljs.core.reduce","cljs.core/+","pz15.db/count-greater","n","v","iter__5523__auto__","s__14836","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__14838","cljs.core/chunk-buffer","i__14837","vec__14839","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__14835","cljs.core/chunk-rest","vec__14842","cljs.core/first","cljs.core/cons","cljs.core/rest","i","x","pz15.db/even-perm?","cljs.core/vec","cljs.core.map_indexed","a","b","s__14846","b__14848","i__14847","vec__14849","iter__14845","vec__14852","cljs.core.subvec","cljs.core._EQ_","cljs.core/rem","pz15.db/random-state","cljs.core/shuffle","cljs.core.range","zero","cljs.core/quot","f","cljs.core.filter","cljs.core.mapv","cljs.core/zipmap","cljs.core.partition","js/pz15.db.target-state","pz15.db/target-state","cljs.core.map","pz15.db/swap-elts","i1","i2","cljs.core.assoc","pz15.db/inside?","pz15.db/sort-row-by-value","row","cljs.core.into","cljs.core.sort_by","pz15.db/switch-hor","board","pos","vec__14855","vec__14858","zero-row","zero-pos","cljs.core.get","y","n1","n2","pz15.db/switch-vert","vec__14861","vec__14864","vv","new-zero-row","new-row","p__14867","map__14868","cljs.core/--destructure-map","pz15.db/next-state-for-action","action","next-s","pz15.db/move-right","new-state","pz15.db/move-left","pz15.db/move-down","pz15.db/move-up","pz15.db/default-db","cljs.core/chunk-first"],"sourcesContent":["(ns pz15.db\n  (:require\n   [clojure.set :refer [map-invert]]\n   [pz15.walkdist :as wd]\n   [shadow.resource :as rc]\n   [cljs.reader :as rdr]))\n\n\n(defonce dists\n  wd/dists\n  )\n\n(defonce ^:const UP 1)\n\n(defonce ^:const DOWN -1)\n\n(defonce ^:const LEFT 10)\n\n(defonce ^:const RIGHT -10)\n\n(defn sum-seq [s]\n  (reduce + s))\n\n(defn count-greater [n v]\n  (sum-seq (for [[i x] v]\n             (if (> n x) 1 0))))\n\n(defn even-perm? [s]\n  (let [v (vec (map-indexed (fn [a b] [(+ a 1) b]) s))\n        s (sum-seq (for [[i n] v]\n                     (count-greater n (subvec v i))))]\n\n    (= (rem s 2) 0)))\n\n(defn random-state []\n  (loop [v (shuffle (range 16))]\n    (let [zero (quot (.indexOf v 0) 4)\n          f (filter (fn [x] (> x 0)) v)]\n      (if (or (and (even-perm? f) (= (rem (+ zero 1) 2) 0))\n              (and (not (even-perm? f)) (> (rem (+ zero 1) 2) 0)))\n        {:board\n         (mapv (fn [x] (zipmap x (range 4)))\n               (mapv vec (partition 4 v))) :zero zero}\n        (recur (shuffle (range 16)))))))\n\n(defonce target-state\n  {:board\n   (mapv (fn [x] (zipmap x (range 4)))\n         (mapv vec (partition 4 (map (fn [x] (rem (+ x 1) 16)) (range 16))))) :zero 3})\n\n(defn swap-elts [v i1 i2] (assoc v i2 (v i1) i1 (v i2)))\n\n(defn inside? [x] (and (>= x 0) (< x 4)))\n\n(defn sort-row-by-value [row]\n  (into {} (sort-by (fn [a] (nth a 1)) (vec row))))\n\n(defn switch-hor [board zero pos]\n  (let [zero-row (nth board zero)\n        zero-pos (get zero-row 0)\n        a (vec zero-row)\n        x (nth a pos)\n        y (nth a zero-pos)\n        [n1 i1] x\n        [n2 i2] y]\n    (assoc board zero (into {} (assoc (assoc a i1 [n2 i1]) i2 [n1 i2])))))\n\n(defn switch-vert [board zero pos]\n  (let [vv (mapv vec board)\n        zero-pos (get (nth board zero) 0)\n        zero-row (nth vv zero)\n        row (nth vv pos)\n        [n1 i1] (nth zero-row zero-pos)\n        [n2 i2] (nth row zero-pos)\n        new-zero-row (into {} (assoc zero-row i1 [n2 i2]))\n        new-row (into {} (assoc row i1 [n1 i1]))]\n    (assoc (assoc board zero new-zero-row) pos new-row)))\n\n(defn next-state-for-action [{:keys [board zero]} action]\n  (let [zero-row (nth board zero)\n        zero-pos (get zero-row 0)\n        next-s (cond\n                 (= action UP) (if (inside? (+ zero 1)) {:board (switch-vert board zero (+ zero 1)) :zero (+ zero 1)} nil)\n                 (= action DOWN) (if (inside? (- zero 1)) {:board (switch-vert board zero (- zero 1)) :zero (- zero 1)} nil)\n                 (= action LEFT) (if (inside? (+ zero-pos 1)) {:board (switch-hor board zero (+ zero-pos 1)) :zero zero} nil)\n                 :else (if (inside? (- zero-pos 1)) {:board (switch-hor board zero (- zero-pos 1)) :zero zero} nil))]\n\n    (if (some? next-s)\n      {:board (mapv sort-row-by-value (:board next-s)) :zero (:zero next-s)}\n      nil)))\n\n(defn move-right [s]\n  (let [new-state (next-state-for-action s RIGHT)]\n  ;;(let [new-state s]\n    (if (some? new-state)\n      new-state s)))\n\n(defn move-left [s]\n  (let [new-state (next-state-for-action s LEFT)]\n  ;;(let [new-state s]\n    (if (some? new-state)\n      new-state s)))\n\n(defn move-down [s]\n  (let [new-state (next-state-for-action s DOWN)]\n  ;;(let [new-state s]\n    (if (some? new-state)\n      new-state s)))\n\n(defn move-up [s]\n  (let [new-state (next-state-for-action s UP)]\n  ;;(let [new-state s]\n    (if (some? new-state)\n      new-state s)))\n\n(def default-db\n  {:name \"re-frame\"\n   :state (random-state)\n   :solution []\n   :solving false\n   :start-time nil\n   :elapsed-seconds 0\n   :need-to-solve false})\n"]}