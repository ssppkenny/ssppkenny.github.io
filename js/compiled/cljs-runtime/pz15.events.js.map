{"version":3,"sources":["pz15/events.cljs"],"mappings":";AAOA,yDAAA,zDAACA,oJAEC,WAAAC,SAAwBM;AAAxB,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEAAaG;SAAb,AAAAD,4CAAAF,eAAA,hEAAmBI;AAAnB,AACE,AAAME,YAAWH;;AADnB,kDAAA,+KAAA,kDAAA,mFAAA,mFAAA,wEAAA,2CAAA,yGAAA,6DAAA,mFAAA,kFAAA,rxBAEO,iDAAA,uEAAA,xHAACI,8CAAMH,8cACiB,kDAAA,lDAACI,4CAAIL;;AAKtC,yDAAA,zDAACL,mJAEC,WAAAW,SAAwBJ;AAAxB,AAAA,IAAAK,aAAAD;IAAAC,iBAAA,AAAAT,4BAAAS;YAAA,AAAAR,4CAAAQ,eAAA,nEAAaP;SAAb,AAAAD,4CAAAQ,eAAA,hEAAmBN;AAAnB,AACE,AAAME,YAAWH;;AADnB,kDAAA,+KAAA,kDAAA,mFAAA,mFAAA,wEAAA,2CAAA,yGAAA,6DAAA,mFAAA,mFAAA,txBAEO,iDAAA,uEAAA,xHAACI,8CAAMH,8cACiB,kDAAA,lDAACI,4CAAIL;;AAKtC,yDAAA,zDAACL,gJAEC,WAAAa,SAAwBN;AAAxB,AAAA,IAAAO,aAAAD;IAAAC,iBAAA,AAAAX,4BAAAW;YAAA,AAAAV,4CAAAU,eAAA,nEAAaT;SAAb,AAAAD,4CAAAU,eAAA,hEAAmBR;AAAnB,AACE,AAAME,YAAWH;;AADnB,kDAAA,+KAAA,kDAAA,mFAAA,mFAAA,wEAAA,2CAAA,yGAAA,6DAAA,mFAAA,8EAAA,jxBAEO,iDAAA,uEAAA,xHAACI,8CAAMH,8cACiB,kDAAA,lDAACI,4CAAIL;;AAKtC,yDAAA,zDAACL,oJAEC,WAAAe,SAAwBR;AAAxB,AAAA,IAAAS,aAAAD;IAAAC,iBAAA,AAAAb,4BAAAa;SAAA,AAAAZ,4CAAAY,eAAA,hEAAaV;YAAb,AAAAF,4CAAAY,eAAA,nEAAgBX;AAAhB,AACE,AAAMG,YAAWH;;AADnB,kDAAA,+KAAA,kDAAA,mFAAA,mFAAA,wEAAA,2CAAA,yGAAA,6DAAA,mFAAA,mFAAA,txBAEO,iDAAA,uEAAA,xHAACI,8CAAMH,8cACiB,kDAAA,lDAACI,4CAAIL;;AAMtC,yDAAA,zDAACY,qIAEC,WAAKX;AAAL,AACI,wDAAA,uEAAA,xHAACG,8CAAMH;;AAIb,yDAAA,zDAACW,4IAEC,WAAKX;AAAL,AACE,IACMY,YAAU,AAACC,kBAAa,AAAA,sFAAQb;AADtC,AAGM,yDAAA,lDAACc,+CAAOd,2DAAU,WAAKe;AAAL,AAAQH;;;AAKpC,yDAAA,zDAACD,uIAEC,WAAKX;AAAL,AACE,IACMY,YAAU,AAACI,gBAAW,AAAA,sFAAQhB;AADpC,AAGM,yDAAA,lDAACc,+CAAOd,2DAAU,WAAKe;AAAL,AAAQH;;;AAKpC,yDAAA,zDAACD,4IAEC,WAAKX;AAAL,AACE,IACMY,YAAU,AAACK,mBAAc,AAAA,sFAAQjB;AADvC,AAGM,yDAAA,lDAACc,+CAAOd,2DAAU,WAAKe;AAAL,AAAQH;;;AAKpC,yDAAA,zDAACD,2IAEC,WAAKX;AAAL,AACE,IACMY,YAAU,AAACM,kBAAa,AAAA,sFAAQlB;AADtC,AAGM,yDAAA,lDAACc,+CAAOd,2DAAU,WAAKe;AAAL,AAAQH;;;AAKpC,yDAAA,zDAACD,wIAEC,WAAKX;AAAL,AACE,IACMY,YAAU,AAACO;AADjB,AAGM,+DAAA,oHAAA,uEAAA,nPAAChB,qDAAMH,2DAAUY;;AAK3B,yDAAA,zDAACD,oJAEA,WAAKS,EAAEA;AAAP,AACEC","names":["re_frame.core.reg_event_fx","p__13528","map__13529","cljs.core/--destructure-map","cljs.core.get","event","db","arg","js/console","cljs.core.assoc","cljs.core.nth","p__13530","map__13531","p__13532","map__13533","p__13534","map__13535","re_frame.core.reg_event_db","new-state","pz15.db/move-down","cljs.core.update","a","pz15.db/move-up","pz15.db/move-right","pz15.db/move-left","pz15.db/random-state","_","pz15.db/default-db"],"sourcesContent":["(ns pz15.events\n  (:require\n   [re-frame.core :as re-frame]\n   [re-pressed.core :as rp]\n   [pz15.db :as db]\n   ))\n\n(re-frame/reg-event-fx\n  ::timeout-left\n  (fn [{:keys [event db]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-left 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-right\n  (fn [{:keys [event db]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-right 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-up\n  (fn [{:keys [event db]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-up 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-down\n  (fn [{:keys [db event]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-down 0]}]]\n     }\n    )\n  )\n\n\n(re-frame/reg-event-db\n  ::solve\n  (fn [db]\n      (assoc db :need-to-solve true)\n    )\n  )\n\n(re-frame/reg-event-db\n  ::key-down\n  (fn [db]\n    (let [\n          new-state (db/move-down (:state db))\n          ]\n          (update db :state (fn [a] new-state))\n          \n      ) \n    )\n  )\n(re-frame/reg-event-db\n  ::key-up\n  (fn [db]\n    (let [\n          new-state (db/move-up (:state db))\n          ]\n          (update db :state (fn [a] new-state))\n      ) \n    )\n  )\n\n(re-frame/reg-event-db\n  ::key-right\n  (fn [db]\n    (let [\n          new-state (db/move-right (:state db))\n          ]\n          (update db :state (fn [a] new-state))\n      ) \n    )\n  )\n\n(re-frame/reg-event-db\n  ::key-left\n  (fn [db]\n    (let [\n          new-state (db/move-left (:state db))\n          ]\n          (update db :state (fn [a] new-state))\n      ) \n    )\n  )\n\n(re-frame/reg-event-db\n  ::shuffle\n  (fn [db]\n    (let [\n          new-state (db/random-state)\n          ]\n          (assoc db :state new-state :need-to-solve false)\n      ) \n    )\n  )\n\n(re-frame/reg-event-db\n ::initialize-db\n (fn [_ _]\n   db/default-db))\n\n"]}