{"version":3,"sources":["pz15/events.cljs"],"mappings":"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","names":["js/pz15","js/pz15.events","js/pz15.events.UP","pz15.events/UP","js/pz15.events.DOWN","pz15.events/DOWN","js/pz15.events.LEFT","pz15.events/LEFT","js/pz15.events.RIGHT","pz15.events/RIGHT","pz15.events/states-move","pair","vec__13725","cljs.core.nth","prev_state","state","prev_board","board","prev_zero","zero","cljs.core._EQ_","row","prev_row","zero_prev","cljs.core.get","zero_n","pz15.events/action-to-event","a","pz15.events/states-to-events","states","pairs","cljs.core.map","cljs.core/vector","cljs.core/rest","events","cljs.core/reverse","cljs.core.mapv","cljs.core.conj","cljs.core.map_indexed","b","cljs.core/PersistentVector","cljs.core/count","re_frame.core.reg_event_fx","p__13728","map__13729","cljs.core/--destructure-map","event","db","arg","js/console","cljs.core.assoc","p__13730","map__13731","p__13732","map__13733","p__13734","map__13735","p__13736","map__13737","re_frame.core.reg_event_db","p__13738","map__13739","solution","pz15.bfs/bfs","fx","p__13740","vec__13741","e","d","p__13744","map__13745","new-state","pz15.db/move-down","cljs.core.update","pz15.db/move-up","pz15.db/move-right","pz15.db/move-left","pz15.db/random-state","_","pz15.db/default-db"],"sourcesContent":["(ns pz15.events\n  (:require\n   [re-frame.core :as re-frame]\n   [re-pressed.core :as rp]\n   [pz15.db :as db]\n   [pz15.bfs :as bfs]\n   [clojure.core.async :as ca]\n   ))\n\n\n(defonce ^:const UP 1)\n\n(defonce ^:const DOWN -1)\n\n(defonce ^:const LEFT 10)\n\n(defonce ^:const RIGHT -10)\n\n(defn states-move [pair]\n  (let [[prev_state state] pair\n        prev_board (:board prev_state)\n        board (:board state)\n        prev_zero (:zero prev_state)\n        zero (:zero state)]\n    (if (not (= zero prev_zero))\n      (- zero prev_zero)\n      (let [row (nth board zero)\n            prev_row (nth prev_board zero)\n            zero_prev (get prev_row 0)\n            zero_n (get row 0)]\n        (* (- zero_n zero_prev) 10)))))\n\n(defn action-to-event [a]\n  (cond\n    (= a UP) ::timeout-up\n    (= a DOWN) ::timeout-down\n    (= a LEFT) ::timeout-left\n    (= a RIGHT) ::timeout-right))\n\n(defn states-to-events [states]\n  (let [pairs (map vector (rest states) states)\n        events (reverse (mapv action-to-event (mapv states-move pairs)))]\n    (conj (map-indexed (fn [a b] (vector b (* 500 a)))  events) [::timeout-solved (* (count states) 500)] )\n    )\n)\n\n(re-frame/reg-event-fx\n  ::timeout-left\n  (fn [{:keys [event db]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false :solving true)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-left 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-right\n  (fn [{:keys [event db]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false :solving true)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-right 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-up\n  (fn [{:keys [event db]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false :solving true)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-up 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-solved\n  (fn [{:keys [db event]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false :solving true)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::stop-solve 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-down\n  (fn [{:keys [db event]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-down 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-db\n  ::stop-solve\n  (fn [db]\n      (assoc db :need-to-solve false :solving false)\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::do-solve\n  (fn [{:keys [db event]} arg]\n      (let [solution (bfs/bfs (:state db))\n            events (states-to-events solution)\n            fx (mapv (fn [[e d] arg] [:dispatch-later {:ms d :dispatch [e 0]} ]) events ) \n            ]\n        {:db (assoc db :solving true)\n         :fx fx\n         }\n      )\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::solve\n  (fn [{:keys [db event]} arg]\n        {:db (assoc db :solving true)\n         :fx [[:dispatch-later {:ms 100 :dispatch [::do-solve 0]}]]\n         }\n    )\n  )\n\n(re-frame/reg-event-db\n  ::key-down\n  (fn [db]\n    (let [\n          new-state (db/move-down (:state db))\n          ]\n          (update db :state (fn [a] new-state))\n          \n      ) \n    )\n  )\n(re-frame/reg-event-db\n  ::key-up\n  (fn [db]\n    (let [\n          new-state (db/move-up (:state db))\n          ]\n          (update db :state (fn [a] new-state))\n      ) \n    )\n  )\n\n(re-frame/reg-event-db\n  ::key-right\n  (fn [db]\n    (let [\n          new-state (db/move-right (:state db))\n          ]\n          (update db :state (fn [a] new-state))\n      ) \n    )\n  )\n\n(re-frame/reg-event-db\n  ::key-left\n  (fn [db]\n    (let [\n          new-state (db/move-left (:state db))\n          ]\n          (update db :state (fn [a] new-state))\n      ) \n    )\n  )\n\n(re-frame/reg-event-db\n  ::shuffle\n  (fn [db]\n    (let [\n          new-state (db/random-state)\n          ]\n          (assoc db :state new-state :need-to-solve false)\n      ) \n    )\n  )\n\n(re-frame/reg-event-db\n ::initialize-db\n (fn [_ _]\n   db/default-db))\n\n"]}