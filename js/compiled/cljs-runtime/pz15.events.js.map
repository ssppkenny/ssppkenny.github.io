{"version":3,"sources":["pz15/events.cljs"],"mappings":"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","names":["js/pz15","js/pz15.events","js/pz15.events.UP","pz15.events/UP","js/pz15.events.DOWN","pz15.events/DOWN","js/pz15.events.LEFT","pz15.events/LEFT","js/pz15.events.RIGHT","pz15.events/RIGHT","pz15.events/states-move","pair","vec__13415","cljs.core.nth","prev_state","state","prev_board","board","prev_zero","zero","cljs.core._EQ_","row","prev_row","zero_prev","cljs.core.get","zero_n","pz15.events/action-to-event","a","pz15.events/result-fx","reagent.core.atom","pz15.events/states-to-events","states","pairs","cljs.core.map","cljs.core/vector","cljs.core/rest","events","cljs.core/reverse","cljs.core.mapv","cljs.core.conj","cljs.core.map_indexed","b","cljs.core/PersistentVector","cljs.core/count","re_frame.core.reg_event_fx","p__13418","map__13419","cljs.core/--destructure-map","event","db","arg","js/console","cljs.core.assoc","p__13420","map__13421","p__13422","map__13423","p__13424","map__13425","p__13426","map__13427","re_frame.core.reg_event_db","p__13428","map__13429","cljs.core/deref","js/Parallel","sp","x","pz15.bfs/bfs","cljs.core.println","p__13430","map__13431","vec__13432","ev","sol","fx","p__13435","vec__13436","e","d","p__13439","map__13440","_","p__13441","map__13442","start-time","cljs-time.core/now","p__13443","map__13444","pz15.events/move","f","flag","cljs.core/not","new-state","G__13445","p__13446","map__13447","start-state","start-node","reached","queue","tailrecursion.priority_map.priority_map","p__13448","map__13449","cljs.core/empty?","pz15.bfs/target-state","cljs.core/peek","n","next-result","pz15.bfs/expand-with-dists","cljs.core/pop","new-reached","new-queue","re-frame.core/dispatch","solution","pz15.bfs/node-to-list","end-time","elapsed-seconds","cljs-time.core/in-seconds","cljs-time.core/interval","p__13450","map__13451","pz15.db/move-down","pz15.db/move-up","pz15.db/move-right","pz15.db/move-left","pz15.db/random-state","pz15.db/default-db"],"sourcesContent":["(ns pz15.events\n  (:require\n   [re-frame.core :as re-frame]\n   [tailrecursion.priority-map :as pm]\n   [pz15.db :as db]\n   [pz15.bfs :as bfs]\n   [reagent.core :as reagent]\n   [cljs-time.core :as ctime]\n   ))\n\n(defonce ^:const UP 1)\n\n(defonce ^:const DOWN -1)\n\n(defonce ^:const LEFT 10)\n\n(defonce ^:const RIGHT -10)\n\n(defn states-move [pair]\n  (let [[prev_state state] pair\n        prev_board (:board prev_state)\n        board (:board state)\n        prev_zero (:zero prev_state)\n        zero (:zero state)]\n    (if (not (= zero prev_zero))\n      (- zero prev_zero)\n      (let [row (nth board zero)\n            prev_row (nth prev_board zero)\n            zero_prev (get prev_row 0)\n            zero_n (get row 0)]\n        (* (- zero_n zero_prev) 10)))))\n\n(defn action-to-event [a]\n  (cond\n    (= a UP) ::timeout-up\n    (= a DOWN) ::timeout-down\n    (= a LEFT) ::timeout-left\n    (= a RIGHT) ::timeout-right))\n\n(def result-fx (reagent/atom []))\n\n(defn states-to-events [states]\n  (let [pairs (map vector (rest states) states)\n        events (reverse (mapv action-to-event (mapv states-move pairs)))]\n    (conj (map-indexed (fn [a b] (vector b (* 500 a)))  events) [::timeout-solved (* (count states) 500)] )\n    )\n)\n\n(re-frame/reg-event-fx\n  ::timeout-left\n  (fn [{:keys [event db]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false :solving true)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-left 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-right\n  (fn [{:keys [event db]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false :solving true)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-right 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-up\n  (fn [{:keys [event db]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false :solving true)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-up 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-solved\n  (fn [{:keys [db event]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false :solving true)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::stop-solve 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-down\n  (fn [{:keys [db event]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-down 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-db\n  ::stop-solve\n  (fn [db]\n      (assoc db :need-to-solve false :solving false)\n    )\n  )\n\n\n(re-frame/reg-event-fx\n  ::do-solve\n  (fn [{:keys [db event]} arg]\n      (let [a (new js/Parallel (:state db))\n            sp (.spawn a (fn [x] (bfs/bfs x)))\n            ]\n        (.then sp (fn [x] (println x)))\n        {:db (assoc db :solving true)\n         :fx @result-fx\n         }\n      )\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::play-solution\n  (fn [{:keys [db event]} arg]\n    (let [[ev sol] event\n           events (states-to-events sol)\n           fx (mapv (fn [[e d] arg] [:dispatch-later {:ms d :dispatch [e 0]} ]) events ) \n          ]\n        {:db db \n         :fx fx \n         }\n      )\n    )\n  )\n\n\n(re-frame/reg-event-fx\n  ::do-new-solve\n  (fn [{:keys [db]} _]\n        {:db (assoc db :solving true)\n          :fx [ [:dispatch-later {:ms 100 :dispatch [::bfs (:state db)]}] ]\n         }\n))\n\n(re-frame/reg-event-fx\n  ::new-solve\n  (fn [{:keys [db]} _]\n        (let [start-time (ctime/now)]\n        (if (:solving db)\n          {:db db}\n          {:db (assoc (assoc (assoc db :solving true) :start-time start-time) :elapsed-seconds 0)\n           :fx [ [:dispatch-later {:ms 500 :dispatch [::do-new-solve 0]}] ]\n          }\n          )\n          )\n    )\n)\n\n\n(re-frame/reg-event-fx\n  ::solve\n  (fn [{:keys [db]} _]\n        {:db (assoc db :solving true)\n         :fx [[:dispatch-later {:ms 100 :dispatch [::do-solve 0]}]]\n         }\n    )\n  )\n\n(defn move [db event f]\n    (let [\n          flag (or (= (nth event 1) 0) (not (:solving db)))\n          new-state (f (:state db))\n          ]\n          (if flag \n             (assoc db :state new-state)\n              db  \n          )\n      ) \n  )\n\n(re-frame/reg-event-fx\n  ::bfs\n  (fn [{:keys [db event]} _]\n    (let [start-state (nth event 1)\n          start-node {:state start-state :length 0}\n          reached {start-state start-node}\n          queue (pm/priority-map start-node 0)\n          ]\n        {:db db\n         :fx [[:dispatch-later {:ms 100 :dispatch [::bfs-step reached queue]}]]\n         } \n      )\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::bfs-step\n  (fn [{:keys [db event]} _]\n    (let [reached (nth event 1)\n          queue (nth event 2)]\n        (if (and (not (empty? queue)) (not (= bfs/target-state (:state (nth (peek queue) 0)))))\n        (let [n (nth (peek queue) 0)\n              next-result (bfs/expand-with-dists n reached (pop queue))\n              new-reached (:reached next-result)\n              new-queue (:queue next-result)]\n          (re-frame/dispatch [::bfs-step new-reached new-queue])\n          )\n         (let [solution (bfs/node-to-list (nth (peek queue) 0))\n               end-time (ctime/now)\n               elapsed-seconds (ctime/in-seconds (ctime/interval (:start-time db) end-time))\n               ]\n          ;; here transform solution \n          (re-frame/dispatch ^:flush-dom [::set-elapsed elapsed-seconds])\n          (re-frame/dispatch ^:flush-dom [::play-solution solution])\n          )\n        )\n      )\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::set-elapsed\n  (fn [{:keys [db event]} _]\n    {:db (assoc db :elapsed-seconds (nth event 1))}\n    )\n  )\n\n(re-frame/reg-event-db\n  ::key-down\n  (fn [db event]\n    (move db event db/move-down)\n    )\n  )\n(re-frame/reg-event-db\n  ::key-up\n  (fn [db event]\n    (move db event db/move-up)\n    )\n  )\n\n(re-frame/reg-event-db\n  ::key-right\n  (fn [db event]\n    (move db event db/move-right)\n    )\n  )\n\n(re-frame/reg-event-db\n  ::key-left\n  (fn [db event]\n    (move db event db/move-left)\n    )\n  )\n\n(re-frame/reg-event-db\n  ::shuffle\n  (fn [db]\n    (let [\n          new-state (db/random-state)\n          ]\n          (if (not (:solving db))\n            (assoc (assoc db :state new-state :need-to-solve false) :elapsed-seconds 0)\n            db\n          )\n      ) \n    )\n  )\n\n(re-frame/reg-event-db\n ::initialize-db\n (fn [_ _]\n   db/default-db))\n\n"]}