{"version":3,"sources":["pz15/events.cljs"],"mappings":";AAUA,GAAA,QAAAA,iCAAAC,wCAAAC;AAAA;AAAA,AAAA,iBAAA,jBAAiBC;;AAEjB,GAAA,QAAAH,iCAAAC,wCAAAG;AAAA;AAAA,AAAA,mBAAA,nBAAiBC;;AAEjB,GAAA,QAAAL,iCAAAC,wCAAAK;AAAA;AAAA,AAAA,mBAAA,nBAAiBC;;AAEjB,GAAA,QAAAP,iCAAAC,wCAAAO;AAAA;AAAA,AAAA,oBAAA,pBAAiBC;;AAEjB,0BAAA,1BAAMC,4DAAaC;AAAnB,AACE,IAAAC,aAAyBD;iBAAzB,AAAAE,4CAAAD,WAAA,IAAA,xEAAOE;YAAP,AAAAD,4CAAAD,WAAA,IAAA,nEAAkBG;IACZC,aAAW,AAAA,sFAAQF;IACnBG,QAAM,AAAA,sFAAQF;IACdG,YAAU,AAAA,mFAAOJ;IACjBK,OAAK,AAAA,mFAAOJ;AAJlB,AAKE,GAAI,GAAK,AAACK,6CAAED,KAAKD;AACf,QAAGC,OAAKD;;AACR,IAAMG,MAAI,AAACR,4CAAII,MAAME;IACfG,WAAS,AAACT,4CAAIG,WAAWG;IACzBI,YAAU,qDAAA,rDAACC,4CAAIF;IACfG,SAAO,gDAAA,hDAACD,4CAAIH;AAHlB,AAIE,+BAAA,vBAAG,CAAGI,SAAOF;;;AAErB,8BAAA,9BAAMG,oEAAiBC;AAAvB,AACE,GACE,AAACP,6CAAEO,EAAExB,AAAA;AADP;;AAAA,GAEE,AAACiB,6CAAEO,EAAEtB,AAAA;AAFP;;AAAA,GAGE,AAACe,6CAAEO,EAAEpB,AAAA;AAHP;;AAAA,GAIE,AAACa,6CAAEO,EAAElB,AAAA;AAJP;;AAAA;;;;;;AAMF,+BAAA,/BAAMmB,sEAAkBC;AAAxB,AACE,IAAMC,QAAM,AAACC,4CAAIC,iBAAO,AAACC,eAAKJ,QAAQA;IAChCK,SAAO,AAACC,kBAAQ,AAACC,6CAAKV,4BAAgB,AAACU,6CAAK1B,wBAAYoB;AAD9D,AAEE,OAACO,6CAAK,AAACC,oDAAY,WAAKX,EAAEY;AAAP,AAAU,YAAAC,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,gBAAA,fAAQD,EAAE,CAAA,QAAOZ;WAA9C,mFAAA,3FAAoDO,wLAA0B,2BAAA,1BAAG,AAACO,gBAAMZ;;AAI5F,yDAAA,zDAACa,oJAEC,WAAAC,SAAwBK;AAAxB,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAA,AAAApB,4CAAAoB,eAAA,nEAAaE;SAAb,AAAAtB,4CAAAoB,eAAA,hEAAmBG;AAAnB,AACE,AAAME,YAAWH;;AADnB,kDAAA,6SAAA,kDAAA,mFAAA,mFAAA,wEAAA,2CAAA,yGAAA,6DAAA,mFAAA,kFAAA,n5BAEO,wDAAA,uEAAA,wDAAA,2DAAA,lPAACI,qDAAMH,qkBACiB,kDAAA,lDAAClC,4CAAIiC;;AAKtC,yDAAA,zDAACJ,mJAEC,WAAAS,SAAwBH;AAAxB,AAAA,IAAAI,aAAAD;IAAAC,iBAAA,AAAAP,4BAAAO;YAAA,AAAA5B,4CAAA4B,eAAA,nEAAaN;SAAb,AAAAtB,4CAAA4B,eAAA,hEAAmBL;AAAnB,AACE,AAAME,YAAWH;;AADnB,kDAAA,6SAAA,kDAAA,mFAAA,mFAAA,wEAAA,2CAAA,yGAAA,6DAAA,mFAAA,mFAAA,p5BAEO,wDAAA,uEAAA,wDAAA,2DAAA,lPAACI,qDAAMH,qkBACiB,kDAAA,lDAAClC,4CAAIiC;;AAKtC,yDAAA,zDAACJ,gJAEC,WAAAW,SAAwBL;AAAxB,AAAA,IAAAM,aAAAD;IAAAC,iBAAA,AAAAT,4BAAAS;YAAA,AAAA9B,4CAAA8B,eAAA,nEAAaR;SAAb,AAAAtB,4CAAA8B,eAAA,hEAAmBP;AAAnB,AACE,AAAME,YAAWH;;AADnB,kDAAA,6SAAA,kDAAA,mFAAA,mFAAA,wEAAA,2CAAA,yGAAA,6DAAA,mFAAA,8EAAA,/4BAEO,wDAAA,uEAAA,wDAAA,2DAAA,lPAACI,qDAAMH,qkBACiB,kDAAA,lDAAClC,4CAAIiC;;AAKtC,yDAAA,zDAACJ,sJAEC,WAAAa,SAAwBP;AAAxB,AAAA,IAAAQ,aAAAD;IAAAC,iBAAA,AAAAX,4BAAAW;SAAA,AAAAhC,4CAAAgC,eAAA,hEAAaT;YAAb,AAAAvB,4CAAAgC,eAAA,nEAAgBV;AAAhB,AACE,AAAMG,YAAWH;;AADnB,kDAAA,6SAAA,kDAAA,mFAAA,mFAAA,wEAAA,2CAAA,yGAAA,6DAAA,mFAAA,qFAAA,t5BAEO,wDAAA,uEAAA,wDAAA,2DAAA,lPAACI,qDAAMH,qkBACiB,kDAAA,lDAAClC,4CAAIiC;;AAKtC,yDAAA,zDAACJ,oJAEC,WAAAe,SAAwBT;AAAxB,AAAA,IAAAU,aAAAD;IAAAC,iBAAA,AAAAb,4BAAAa;SAAA,AAAAlC,4CAAAkC,eAAA,hEAAaX;YAAb,AAAAvB,4CAAAkC,eAAA,nEAAgBZ;AAAhB,AACE,AAAMG,YAAWH;;AADnB,kDAAA,+KAAA,kDAAA,mFAAA,mFAAA,wEAAA,2CAAA,yGAAA,6DAAA,mFAAA,mFAAA,txBAEO,iDAAA,uEAAA,xHAACI,8CAAMH,8cACiB,kDAAA,lDAAClC,4CAAIiC;;AAKtC,yDAAA,zDAACa,8IAEC,WAAKZ;AAAL,AACI,+DAAA,uEAAA,wDAAA,2DAAA,lPAACG,qDAAMH;;AAIb,yDAAA,zDAACL,2IAEC,WAAAkB,SAAwBZ;AAAxB,AAAA,IAAAa,aAAAD;IAAAC,iBAAA,AAAAhB,4BAAAgB;SAAA,AAAArC,4CAAAqC,eAAA,hEAAad;YAAb,AAAAvB,4CAAAqC,eAAA,nEAAgBf;AAAhB,AACI,IAAMgB,WAAS,AAACC,aAAQ,AAAA,sFAAQhB;IAC1Bb,SAAO,AAACN,6BAAiBkC;IACzBE,KAAG,AAAC5B,6CAAK,WAAA6B,SAAWjB;AAAX,AAAA,IAAAkB,aAAAD;QAAA,AAAApD,4CAAAqD,WAAA,IAAA,/DAAMC;QAAN,AAAAtD,4CAAAqD,WAAA,IAAA,/DAAQE;AAAR,AAAA,0FAAA,wEAAA,2CAAA,oDAAA,6DAAA,qFAAA,pJAAsCA,kJAAaD;GAASjC;AAF3E,AAAA,kDAAA,kKAAA,lHAIO,iDAAA,2DAAA,5GAACgB,8CAAMH,sHACPiB;;AAMb,yDAAA,zDAACtB,oJAEC,WAAA2B,SAAwBrB;AAAxB,AAAA,IAAAsB,aAAAD;IAAAC,iBAAA,AAAAzB,4BAAAyB;SAAA,AAAA9C,4CAAA8C,eAAA,hEAAavB;YAAb,AAAAvB,4CAAA8C,eAAA,nEAAgBxB;AAAhB,AACE,IAAAyB,aAAezB;SAAf,AAAAjC,4CAAA0D,WAAA,IAAA,hEAAOC;UAAP,AAAA3D,4CAAA0D,WAAA,IAAA,jEAAUE;IACHvC,SAAO,AAACN,6BAAiB6C;IACzBT,KAAG,AAAC5B,6CAAK,WAAAsC,SAAW1B;AAAX,AAAA,IAAA2B,aAAAD;QAAA,AAAA7D,4CAAA8D,WAAA,IAAA,/DAAMR;QAAN,AAAAtD,4CAAA8D,WAAA,IAAA,/DAAQP;AAAR,AAAA,0FAAA,wEAAA,2CAAA,oDAAA,6DAAA,qFAAA,pJAAsCA,kJAAaD;GAASjC;AAF5E,AAAA,kDAAA,mDAAA,HAISa,qDACAiB;;AAOb,yDAAA,zDAACtB,mJAEC,WAAAkC,SAAwB5B;AAAxB,AAAA,IAAA6B,aAAAD;IAAAC,iBAAA,AAAAhC,4BAAAgC;SAAA,AAAArD,4CAAAqD,eAAA,hEAAa9B;YAAb,AAAAvB,4CAAAqD,eAAA,nEAAgB/B;AAAhB,AACM,IAAOgC,IAAE,mDAAA,nDAACC;AAAV,AACC,IAAAC,yBAAA,AAAAD,mDAAA;AAAA,AAAA,AAAAE,kCAAA;AAAA,AAAA,IAAAC,mBAAA,iBAAAC,wBAAA,WAAAC;AAAA,AAAA,IAAAC,kBAAA,CAAAD,YAAA;AAAA,AAAA,GAAA,CAAAC,oBAAA;AAAA,IAAAC,aAAA,AAAA,sFAA0BvC;IAA1BwC,aAAA,aAAA,AAA8B,kBAAKmB;AAAL,AAAQ,8BAAA,mFAAA,1GAACC,qMAAmC,AAAC5C,aAAQ,AAAA,sFAAQhB;;;IAA3FyC,aAAA,0DAAAF,WAAAC,rEAAQkB,wDAAQ3B;IAAhBM,kBAAAA;AAAA,AAAA,OAAAK,6CAAAL,gBAAAI;;AAAA;;;AAAA,AAAA;;;AAAA,AAAA,IAAAE,iBAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AAAA,AAAA,CAAAA,eAAA,OAAAC;;AAAA,CAAAD,eAAA,OAAA;;AAAAA;;6DAAAN;;AAAA,AAAA,IAAAQ,2BAAA,iBAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA,AAAAV,sBAAAC;AAAA,AAAA,GAAA,AAAAU,mCAAAD,sBAAA;AAAA;;AAAAA;;;;gBAAA,IAAAE,oBAAAC;AAAA,AAAA,IAAAC,uBAAAb;AAAA,AAAA,CAAAa,qBAAA,OAAAF;;AAAAE;AAAA,GAAA,AAAAC,cAAA,CAAAd,YAAA;AAAA,IAAAe,uBAAAf;AAAA,AAAA,CAAAe,qBAAA,OAAA,AAAAC,gBAAA,CAAAhB,YAAA;;AAAAe;AAAA,MAAAJ;;;AAAA;;AAAA,AAAA,GAAA,AAAAD,mCAAAF,yBAAA;AAAA,eAAAR;;;;AAAAQ;;;;;oDAAAR;;;;;6DAAAA;;;;;;;;;IAAAiB,uBAAA,iBAAAC,iBAAA,AAAApB;AAAA,AAAA,CAAAoB,eAAAC,AAAA,OAAAvB;;AAAAsB;;AAAA,AAAA,OAAAE,2DAAAH;;;AAAArB;AADD,kDAAA,gDAIK,iDAAA,2DAAA,5GAAC9B,8CAAMH;;AAKpB,yDAAA,zDAACL,8IAEC,WAAAkE,SAAwB5D;AAAxB,AAAA,IAAA6D,aAAAD;IAAAC,iBAAA,AAAAhE,4BAAAgE;SAAA,AAAArF,4CAAAqF,eAAA,hEAAa9D;YAAb,AAAAvB,4CAAAqF,eAAA,nEAAgB/D;AAAhB,AAAA,kDAAA,kKAAA,kDAAA,mFAAA,mFAAA,wEAAA,2CAAA,kDAAA,MAAA,6DAAA,mFAAA,0FAAA,/tBACW,iDAAA,2DAAA,5GAACI,8CAAMH;;AAOpB,yDAAA,zDAACL,qIAEC,WAAAoE,SAAwB9D;AAAxB,AAAA,IAAA+D,aAAAD;IAAAC,iBAAA,AAAAlE,4BAAAkE;SAAA,AAAAvF,4CAAAuF,eAAA,hEAAahE;YAAb,AAAAvB,4CAAAuF,eAAA,nEAAgBjE;AAAhB,AAAA,kDAAA,kKAAA,kDAAA,mFAAA,mFAAA,wEAAA,2CAAA,kDAAA,MAAA,6DAAA,mFAAA,kFAAA,vtBACW,iDAAA,2DAAA,5GAACI,8CAAMH;;AAMpB,mBAAA,nBAAMiE,8CAAMjE,GAAGD,MAAMmE;AAArB,AACI,IACMC,OAAK,EAAI,oGAAA,pGAAC9F,6CAAE,kDAAA,lDAACP,4CAAIiC,qBAAY,AAACqE,cAAI,AAAA,yFAAUpE;IAC5CqE,YAAU,iBAAAC,WAAG,AAAA,sFAAQtE;AAAX,AAAA,0EAAAsE,wBAAAA,1FAACJ,kCAAAA,4CAAAA;;AAFjB,AAIM,GAAIC;AACD,wDAAA,jDAAChE,8CAAMH,2DAAUqE;;AAChBrE;;;AAKd,yDAAA,zDAACY,4IAEC,WAAKZ,GAAGD;AAAR,AACE,OAACkE,iBAAKjE,GAAGD,MAAMwE;;AAGnB,yDAAA,zDAAC3D,uIAEC,WAAKZ,GAAGD;AAAR,AACE,OAACkE,iBAAKjE,GAAGD,MAAMyE;;AAInB,yDAAA,zDAAC5D,4IAEC,WAAKZ,GAAGD;AAAR,AACE,OAACkE,iBAAKjE,GAAGD,MAAM0E;;AAInB,yDAAA,zDAAC7D,2IAEC,WAAKZ,GAAGD;AAAR,AACE,OAACkE,iBAAKjE,GAAGD,MAAM2E;;AAInB,yDAAA,zDAAC9D,wIAEC,WAAKZ;AAAL,AACE,IACMqE,YAAU,AAACM;AADjB,AAGM,GAAI,AAACP,cAAI,AAAA,yFAAUpE;AACjB,+DAAA,oHAAA,uEAAA,nPAACG,qDAAMH,2DAAUqE;;AACjBrE;;;AAMZ,yDAAA,zDAACY,oJAEA,WAAKgE,EAAEA;AAAP,AACEC","names":["js/pz15","js/pz15.events","js/pz15.events.UP","pz15.events/UP","js/pz15.events.DOWN","pz15.events/DOWN","js/pz15.events.LEFT","pz15.events/LEFT","js/pz15.events.RIGHT","pz15.events/RIGHT","pz15.events/states-move","pair","vec__18500","cljs.core.nth","prev_state","state","prev_board","board","prev_zero","zero","cljs.core._EQ_","row","prev_row","zero_prev","cljs.core.get","zero_n","pz15.events/action-to-event","a","pz15.events/states-to-events","states","pairs","cljs.core.map","cljs.core/vector","cljs.core/rest","events","cljs.core/reverse","cljs.core.mapv","cljs.core.conj","cljs.core.map_indexed","b","cljs.core/PersistentVector","cljs.core/count","re_frame.core.reg_event_fx","p__18503","map__18504","cljs.core/--destructure-map","event","db","arg","js/console","cljs.core.assoc","p__18505","map__18506","p__18507","map__18508","p__18509","map__18510","p__18511","map__18512","re_frame.core.reg_event_db","p__18513","map__18514","solution","pz15.bfs/bfs","fx","p__18515","vec__18516","e","d","p__18519","map__18520","vec__18521","ev","sol","p__18524","vec__18525","p__18528","map__18529","c","cljs.core.async.chan","c__11670__auto__","cljs.core.async.impl.dispatch/run","f__11671__auto__","switch__11573__auto__","state_18534","state_val_18535","inst_18530","inst_18531","inst_18532","cljs.core.async.impl.ioc-helpers/return-chan","statearr-18536","state-machine__11574__auto__","ret-value__11575__auto__","result__11576__auto__","cljs.core/keyword-identical?","ex__11577__auto__","e18537","statearr-18538","cljs.core/seq","statearr-18539","cljs.core/first","state__11672__auto__","statearr-18540","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async.put_BANG_","s","re-frame.core/dispatch","p__18541","map__18542","p__18543","map__18544","pz15.events/move","f","flag","cljs.core/not","new-state","G__18545","pz15.db/move-down","pz15.db/move-up","pz15.db/move-right","pz15.db/move-left","pz15.db/random-state","_","pz15.db/default-db"],"sourcesContent":["(ns pz15.events\n  (:require\n   [re-frame.core :as re-frame]\n   [re-pressed.core :as rp]\n   [pz15.db :as db]\n   [pz15.bfs :as bfs]\n   [clojure.core.async :as ca]\n   ))\n\n\n(defonce ^:const UP 1)\n\n(defonce ^:const DOWN -1)\n\n(defonce ^:const LEFT 10)\n\n(defonce ^:const RIGHT -10)\n\n(defn states-move [pair]\n  (let [[prev_state state] pair\n        prev_board (:board prev_state)\n        board (:board state)\n        prev_zero (:zero prev_state)\n        zero (:zero state)]\n    (if (not (= zero prev_zero))\n      (- zero prev_zero)\n      (let [row (nth board zero)\n            prev_row (nth prev_board zero)\n            zero_prev (get prev_row 0)\n            zero_n (get row 0)]\n        (* (- zero_n zero_prev) 10)))))\n\n(defn action-to-event [a]\n  (cond\n    (= a UP) ::timeout-up\n    (= a DOWN) ::timeout-down\n    (= a LEFT) ::timeout-left\n    (= a RIGHT) ::timeout-right))\n\n(defn states-to-events [states]\n  (let [pairs (map vector (rest states) states)\n        events (reverse (mapv action-to-event (mapv states-move pairs)))]\n    (conj (map-indexed (fn [a b] (vector b (* 500 a)))  events) [::timeout-solved (* (count states) 500)] )\n    )\n)\n\n(re-frame/reg-event-fx\n  ::timeout-left\n  (fn [{:keys [event db]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false :solving true)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-left 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-right\n  (fn [{:keys [event db]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false :solving true)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-right 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-up\n  (fn [{:keys [event db]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false :solving true)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-up 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-solved\n  (fn [{:keys [db event]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false :solving true)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::stop-solve 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-down\n  (fn [{:keys [db event]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-down 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-db\n  ::stop-solve\n  (fn [db]\n      (assoc db :need-to-solve false :solving false)\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::do-solve\n  (fn [{:keys [db event]} arg]\n      (let [solution (bfs/bfs (:state db))\n            events (states-to-events solution)\n            fx (mapv (fn [[e d] arg] [:dispatch-later {:ms d :dispatch [e 0]} ]) events ) \n            ]\n        {:db (assoc db :solving true)\n         :fx fx\n         }\n      )\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::play-solution\n  (fn [{:keys [db event]} arg]\n    (let [[ev sol] event\n           events (states-to-events sol)\n           fx (mapv (fn [[e d] arg] [:dispatch-later {:ms d :dispatch [e 0]} ]) events ) \n          ]\n        {:db db \n         :fx fx \n         }\n      )\n    )\n  )\n\n\n(re-frame/reg-event-fx\n  ::do-new-solve\n  (fn [{:keys [db event]} arg]\n        (let [ c (ca/chan 10) ]\n         (ca/go (ca/put! c (:state db) (fn [s] (re-frame/dispatch [::play-solution (bfs/bfs (:state db))]\n                                   ))))\n           \n        {:db (assoc db :solving true)\n         }\n    )\n))\n\n(re-frame/reg-event-fx\n  ::new-solve\n  (fn [{:keys [db event]} arg]\n        {:db (assoc db :solving true)\n         :fx [ [:dispatch-later {:ms 100 :dispatch [::do-new-solve 0]}] ]\n         }\n    )\n)\n\n\n(re-frame/reg-event-fx\n  ::solve\n  (fn [{:keys [db event]} arg]\n        {:db (assoc db :solving true)\n         :fx [[:dispatch-later {:ms 100 :dispatch [::do-solve 0]}]]\n         }\n    )\n  )\n\n(defn move [db event f]\n    (let [\n          flag (or (= (nth event 1) 0) (not (:solving db)))\n          new-state (f (:state db))\n          ]\n          (if flag \n             (assoc db :state new-state)\n              db  \n          )\n      ) \n  )\n\n(re-frame/reg-event-db\n  ::key-down\n  (fn [db event]\n    (move db event db/move-down)\n    )\n  )\n(re-frame/reg-event-db\n  ::key-up\n  (fn [db event]\n    (move db event db/move-up)\n    )\n  )\n\n(re-frame/reg-event-db\n  ::key-right\n  (fn [db event]\n    (move db event db/move-right)\n    )\n  )\n\n(re-frame/reg-event-db\n  ::key-left\n  (fn [db event]\n    (move db event db/move-left)\n    )\n  )\n\n(re-frame/reg-event-db\n  ::shuffle\n  (fn [db]\n    (let [\n          new-state (db/random-state)\n          ]\n          (if (not (:solving db))\n            (assoc db :state new-state :need-to-solve false)\n            db\n          )\n      ) \n    )\n  )\n\n(re-frame/reg-event-db\n ::initialize-db\n (fn [_ _]\n   db/default-db))\n\n"]}