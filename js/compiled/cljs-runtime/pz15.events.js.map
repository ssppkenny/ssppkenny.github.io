{"version":3,"sources":["pz15/events.cljs"],"mappings":"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","names":["js/pz15","js/pz15.events","js/pz15.events.UP","pz15.events/UP","js/pz15.events.DOWN","pz15.events/DOWN","js/pz15.events.LEFT","pz15.events/LEFT","js/pz15.events.RIGHT","pz15.events/RIGHT","pz15.events/states-move","pair","vec__15477","cljs.core.nth","prev_state","state","prev_board","board","prev_zero","zero","cljs.core._EQ_","row","prev_row","zero_prev","cljs.core.get","zero_n","pz15.events/action-to-event","a","pz15.events/result-fx","reagent.core.atom","pz15.events/states-to-events","states","pairs","cljs.core.map","cljs.core/vector","cljs.core/rest","events","cljs.core/reverse","cljs.core.mapv","cljs.core.conj","cljs.core.map_indexed","b","cljs.core/PersistentVector","cljs.core/count","re_frame.core.reg_event_fx","p__15480","map__15481","cljs.core/--destructure-map","event","db","arg","js/console","cljs.core.assoc","p__15482","map__15483","p__15484","map__15485","p__15486","map__15487","p__15488","map__15489","re_frame.core.reg_event_db","pz15.events/solution-to-fx","solution","p__15490","vec__15491","e","d","p__15494","map__15495","cljs.core/deref","js/Parallel","sp","x","pz15.bfs/bfs","cljs.core.println","p__15496","map__15497","vec__15498","ev","sol","fx","p__15501","vec__15502","p__15505","map__15506","c","cljs.core.async.chan","re-frame.core/dispatch","p__15507","map__15508","p__15509","map__15510","pz15.events/move","f","flag","cljs.core/not","new-state","G__15511","pz15.db/move-down","pz15.db/move-up","pz15.db/move-right","pz15.db/move-left","pz15.db/random-state","_","pz15.db/default-db"],"sourcesContent":["(ns pz15.events\n  (:require\n   [re-frame.core :as re-frame]\n   [re-pressed.core :as rp]\n   [pz15.db :as db]\n   [pz15.bfs :as bfs]\n   [clojure.core.async :as ca]\n   [reagent.core :as reagent]\n   ))\n\n(defonce ^:const UP 1)\n\n(defonce ^:const DOWN -1)\n\n(defonce ^:const LEFT 10)\n\n(defonce ^:const RIGHT -10)\n\n(defn states-move [pair]\n  (let [[prev_state state] pair\n        prev_board (:board prev_state)\n        board (:board state)\n        prev_zero (:zero prev_state)\n        zero (:zero state)]\n    (if (not (= zero prev_zero))\n      (- zero prev_zero)\n      (let [row (nth board zero)\n            prev_row (nth prev_board zero)\n            zero_prev (get prev_row 0)\n            zero_n (get row 0)]\n        (* (- zero_n zero_prev) 10)))))\n\n(defn action-to-event [a]\n  (cond\n    (= a UP) ::timeout-up\n    (= a DOWN) ::timeout-down\n    (= a LEFT) ::timeout-left\n    (= a RIGHT) ::timeout-right))\n\n(def result-fx (reagent/atom []))\n\n(defn states-to-events [states]\n  (let [pairs (map vector (rest states) states)\n        events (reverse (mapv action-to-event (mapv states-move pairs)))]\n    (conj (map-indexed (fn [a b] (vector b (* 500 a)))  events) [::timeout-solved (* (count states) 500)] )\n    )\n)\n\n(re-frame/reg-event-fx\n  ::timeout-left\n  (fn [{:keys [event db]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false :solving true)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-left 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-right\n  (fn [{:keys [event db]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false :solving true)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-right 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-up\n  (fn [{:keys [event db]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false :solving true)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-up 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-solved\n  (fn [{:keys [db event]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false :solving true)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::stop-solve 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::timeout-down\n  (fn [{:keys [db event]} arg]\n    (.log js/console event)\n    {:db (assoc db :need-to-solve false)\n     :fx [ [:dispatch-later {:ms (nth event 1) :dispatch [::key-down 0]}]]\n     }\n    )\n  )\n\n(re-frame/reg-event-db\n  ::stop-solve\n  (fn [db]\n      (assoc db :need-to-solve false :solving false)\n    )\n  )\n\n(defn solution-to-fx [solution] \n   (mapv (fn [[e d] arg] [:dispatch-later {:ms d :dispatch [e 0]} ]) (states-to-events solution) ) \n)\n\n\n(re-frame/reg-event-fx\n  ::do-solve\n  (fn [{:keys [db event]} arg]\n      (let [a (new js/Parallel (:state db))\n            sp (.spawn a (fn [x] (bfs/bfs x)))\n            ]\n        (.then sp (fn [x] (println x)))\n        {:db (assoc db :solving true)\n         :fx @result-fx\n         }\n      )\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::play-solution\n  (fn [{:keys [db event]} arg]\n    (let [[ev sol] event\n           events (states-to-events sol)\n           fx (mapv (fn [[e d] arg] [:dispatch-later {:ms d :dispatch [e 0]} ]) events ) \n          ]\n        {:db db \n         :fx fx \n         }\n      )\n    )\n  )\n\n\n(re-frame/reg-event-fx\n  ::do-new-solve\n  (fn [{:keys [db event]} arg]\n        (let [ c (ca/chan 10) ]\n         ;;(ca/go (ca/put! c (:state db) (fn [s] (re-frame/dispatch [::play-solution (bfs/bfs (:state db))]\n         ;;                          ))))\n         (re-frame/dispatch ^:flush-dom [::play-solution (bfs/bfs (:state db))])\n        {:db (assoc db :solving true)\n         }\n    )\n))\n\n(re-frame/reg-event-fx\n  ::new-solve\n  (fn [{:keys [db event]} arg]\n        {:db (assoc db :solving true)\n         :fx [ [:dispatch-later {:ms 500 :dispatch [::do-new-solve 0]}] ]\n         }\n    )\n)\n\n\n(re-frame/reg-event-fx\n  ::solve\n  (fn [{:keys [db event]} arg]\n        {:db (assoc db :solving true)\n         :fx [[:dispatch-later {:ms 100 :dispatch [::do-solve 0]}]]\n         }\n    )\n  )\n\n(defn move [db event f]\n    (let [\n          flag (or (= (nth event 1) 0) (not (:solving db)))\n          new-state (f (:state db))\n          ]\n          (if flag \n             (assoc db :state new-state)\n              db  \n          )\n      ) \n  )\n\n(re-frame/reg-event-db\n  ::key-down\n  (fn [db event]\n    (move db event db/move-down)\n    )\n  )\n(re-frame/reg-event-db\n  ::key-up\n  (fn [db event]\n    (move db event db/move-up)\n    )\n  )\n\n(re-frame/reg-event-db\n  ::key-right\n  (fn [db event]\n    (move db event db/move-right)\n    )\n  )\n\n(re-frame/reg-event-db\n  ::key-left\n  (fn [db event]\n    (move db event db/move-left)\n    )\n  )\n\n(re-frame/reg-event-db\n  ::shuffle\n  (fn [db]\n    (let [\n          new-state (db/random-state)\n          ]\n          (if (not (:solving db))\n            (assoc db :state new-state :need-to-solve false)\n            db\n          )\n      ) \n    )\n  )\n\n(re-frame/reg-event-db\n ::initialize-db\n (fn [_ _]\n   db/default-db))\n\n"]}