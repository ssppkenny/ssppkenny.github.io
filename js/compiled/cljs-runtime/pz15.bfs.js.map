{"version":3,"sources":["pz15/bfs.cljs"],"mappings":"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","names":["js/pz15","js/pz15.bfs","js/pz15.bfs.UP","pz15.bfs/UP","js/pz15.bfs.DOWN","pz15.bfs/DOWN","js/pz15.bfs.LEFT","pz15.bfs/LEFT","js/pz15.bfs.RIGHT","pz15.bfs/RIGHT","pz15.bfs/map-values","f","m","cljs.core.map","p__13018","vec__13019","cljs.core.nth","k","v","cljs.core.into","p__13022","vec__13023","pz15.bfs/with-index","x","y","a","pz15.bfs/sum-seq","s","cljs.core.reduce","cljs.core/+","pz15.bfs/transpose-coords","coords","p__13026","vec__13027","vec__13030","n","pz15.bfs/num-to-row","cljs.core._EQ_","cljs.core/quot","pz15.bfs/row-to-freqs","row","cljs.core/frequencies","cljs.core.mapv","cljs.core/keys","p__13033","map__13034","cljs.core/--destructure-map","cljs.core.get","pz15.bfs/state-to-rows","board","zero","new-board","pz15.bfs/state-coords","cljs.core.map_indexed","cljs.core/vector","pz15.bfs/transpose-state","new-zero","tc","cljs.core/sorted-map","cljs.core/seq","cljs.core/group-by","p__13035","vec__13036","vec__13039","iter__5523__auto__","s__13043","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__13045","cljs.core/chunk-buffer","i__13044","vec__13046","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__13042","cljs.core/chunk-rest","vec__13056","cljs.core/first","cljs.core/cons","cljs.core/rest","p__13049","vec__13050","vec__13053","p__13059","vec__13060","vec__13063","b","pz15.bfs/num-to-col","cljs.core/rem","pz15.bfs/col-to-freqs","p__13066","map__13067","pz15.bfs/state-to-cols","js/pz15.bfs.target-state","pz15.bfs/target-state","cljs.core/zipmap","cljs.core.range","cljs.core/vec","cljs.core.partition","pz15.bfs/hor-dist","row-state","pz15.db/dists","pz15.bfs/vert-dist","ts","pz15.bfs/walk-dist","pz15.bfs/manh-dist","t","c1","c2","s__13069","b__13071","i__13070","vec__13072","iter__13068","vec__13081","vec__13075","vec__13078","vec__13084","vec__13087","x1","y1","x2","y2","cljs.core/abs","pz15.bfs/inside?","pz15.bfs/sort-row-by-value","cljs.core.sort_by","pz15.bfs/switch-hor","pos","vec__13090","vec__13093","zero-row","zero-pos","n1","i1","n2","i2","cljs.core.assoc","pz15.bfs/switch-vert","vec__13096","vec__13099","vv","new-zero-row","new-row","p__13102","map__13103","pz15.bfs/next-node-for-action","state","length","action","pz15.bfs/expand-with-dists","node","reached","q","next-nodes","cljs.core/flatten","s__13105","b__13107","i__13106","iter__13104","nn","p","r","vec__13111","seq__13112","first__13113","cljs.core/next","ns","new-prio","new-vals","cljs.core/contains?","new-q","new-r","pz15.bfs/node-to-list","acc","cljs.core.conj","pz15.bfs/bfs","start-state","start-node","tailrecursion.priority_map.priority_map","cljs.core/empty?","cljs.core/peek","next-result","cljs.core/pop","new-reached","new-queue","cljs.core/chunk-first"],"sourcesContent":["(ns pz15.bfs\n  (:require\n   [tailrecursion.priority-map :as pm]\n   [pz15.db :as db]\n   ))\n\n(defonce ^:const UP 1)\n\n(defonce ^:const DOWN -1)\n\n(defonce ^:const LEFT 10)\n\n(defonce ^:const RIGHT -10)\n\n(defn map-values [f m]\n  (->> (map (fn [[k v]] [k (f v)]) m)\n       (into {})))\n\n(defn with-index [[x y :as v]]\n  (map-values (fn [a] [x a]) y))\n\n(defn sum-seq [s]\n  (reduce + s))\n\n(defn transpose-coords [coords]\n  (map (fn [[n [x y]]]\n         [n [y x]]) coords))\n\n(defn num-to-row [n]\n  (if (= n 0)\n    0\n    (+ (quot (- n 1) 4) 1)))\n\n(defn row-to-freqs [row]\n  (frequencies (mapv num-to-row (keys row))))\n\n(defn state-to-rows [{:keys [board zero]}]\n  (let [new-board (mapv row-to-freqs board)]\n    {:board new-board :zero zero}))\n\n(defn state-coords [s]\n  (into {} (mapv with-index (mapv\n                             (fn [x] x)\n                             (map-indexed vector (:board s))))))\n\n(defn transpose-state [s]\n  (let [coords (state-coords s)\n        new-zero (nth (get coords 0) 1)\n        new-board (let [tc (into (sorted-map) (seq\n                                               (group-by (fn [[n [x y]]] x)\n                                                         (transpose-coords\n                                                          coords))))]\n\n                    (for [[k v] tc]\n                      (into {} (mapv (fn [[x [a b]]] {x b}) v))))]\n\n    {:board new-board :zero new-zero}))\n\n(defn num-to-col [n]\n  (if (= n 0)\n    0\n    (if (= (rem n 4) 0) 4 (rem n 4))))\n\n(defn col-to-freqs [row]\n  (frequencies (mapv num-to-col (keys row))))\n\n(defn state-to-cols [{:keys [board zero]}]\n  (let [new-board (mapv col-to-freqs board)]\n    {:board new-board :zero zero}))\n\n(defonce target-state\n  {:board\n   (mapv (fn [x] (zipmap x (range 4)))\n         (mapv vec (partition 4 (map (fn [x] (rem (+ x 1) 16)) (range 16))))) :zero 3})\n\n(defn hor-dist [s]\n  (let [row-state (state-to-rows s)]\n    (get db/dists row-state)))\n\n(defn vert-dist [s]\n  (let [ts (transpose-state s)\n        row-state (state-to-cols ts)]\n    (get db/dists row-state)))\n\n(defn walk-dist [s]\n  (+ (hor-dist s) (vert-dist s)))\n\n(defn manh-dist [s t]\n  (let [c1 (state-coords s)\n        c2 (state-coords t)]\n    (sum-seq (for [[k v] c1]\n               (let [[x1 y1] v\n                     [x2 y2] (get c2 k)]\n                 (+ (abs (- x1 x2)) (abs (- y1 y2))))))))\n\n(defn inside? [x] (and (>= x 0) (< x 4)))\n\n(defn sort-row-by-value [row]\n  (into {} (sort-by (fn [a] (nth a 1)) (vec row))))\n\n(defn switch-hor [board zero pos]\n  (let [zero-row (nth board zero)\n        zero-pos (get zero-row 0)\n        a (vec zero-row)\n        x (nth a pos)\n        y (nth a zero-pos)\n        [n1 i1] x\n        [n2 i2] y]\n    (assoc board zero (into {} (assoc (assoc a i1 [n2 i1]) i2 [n1 i2])))))\n\n(defn switch-vert [board zero pos]\n  (let [vv (mapv vec board)\n        zero-pos (get (nth board zero) 0)\n        zero-row (nth vv zero)\n        row (nth vv pos)\n        [n1 i1] (nth zero-row zero-pos)\n        [n2 i2] (nth row zero-pos)\n        new-zero-row (into {} (assoc zero-row i1 [n2 i2]))\n        new-row (into {} (assoc row i1 [n1 i1]))]\n    (assoc (assoc board zero new-zero-row) pos new-row)))\n\n(defn next-node-for-action [{:keys [state length] :as n} action]\n  (let [board (:board state)\n        zero (:zero state)\n        zero-row (nth board zero)\n        zero-pos (get zero-row 0)]\n    (cond\n      (= action UP) (if (inside? (+ zero 1)) [{:prev n :length (+ length 1) :state {:board (switch-vert board zero (+ zero 1)) :zero (+ zero 1)}}] [])\n      (= action DOWN) (if (inside? (- zero 1)) [{:prev n :length (+ length 1) :state {:board (switch-vert board zero (- zero 1)) :zero (- zero 1)}}] [])\n      (= action LEFT) (if (inside? (+ zero-pos 1)) [{:prev n :length (+ length 1) :state {:board (switch-hor board zero (+ zero-pos 1)) :zero zero}}] [])\n      :else (if (inside? (- zero-pos 1)) [{:prev n :length (+ length 1) :state {:board (switch-hor board zero (- zero-pos 1)) :zero zero}}] []))))\n\n(defn expand-with-dists [node reached q]\n  (let [next-nodes (flatten (for [action [UP DOWN LEFT RIGHT]]\n                              (next-node-for-action node action)))]\n    (loop [nn next-nodes p q r reached]\n      (if (= (count nn) 0)\n        {:queue p :reached r}\n        (let [[n & ns] nn\n              s (:state n)\n              new-prio (+ (:length n) (walk-dist s) (/ (* 2 (manh-dist s target-state)) 3))\n              new-vals (if (not (contains? r s))\n                         {:reached (assoc r s n) :queue (assoc p n new-prio)}\n                         {:reached r :queue p})\n              new-q (:queue new-vals)\n              new-r (:reached new-vals)]\n          (recur ns new-q new-r))))))\n\n(defn node-to-list [node]\n  (loop [n node acc []]\n    (if (not (some? (:prev n)))\n      (conj acc (:state n))\n      (recur (:prev n) (conj acc (:state n))))))\n\n\n;(defn action-to-event [a]\n;  (cond \n;    (= a UP) [::events/key-up]\n;    (= a DOWN) [::events/key-down]\n;    (= a LEFT) [::events/key-left]\n;    (= a RIGHT) [::events/key-right]\n;    )\n;  )\n\n\n(defn bfs [start-state]\n  (let [start-node {:state start-state :length 0}\n        q (pm/priority-map start-node 0)\n        reached {start-state start-node}]\n    (loop [r reached p q]\n      (if (and (not (empty? p)) (not (= target-state (:state (nth (peek p) 0)))))\n        (let [n (nth (peek p) 0)\n              next-result (expand-with-dists n r (pop p))\n              new-reached (:reached next-result)\n              new-queue (:queue next-result)]\n          (recur new-reached new-queue))\n        (node-to-list (nth (peek p) 0))))))\n"]}